"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[920],{9613:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>c});var a=n(9496);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),d=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},m=function(e){var t=d(e.components);return a.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},p=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,m=i(e,["components","mdxType","originalType","parentName"]),p=d(n),c=r,k=p["".concat(s,".").concat(c)]||p[c]||u[c]||o;return n?a.createElement(k,l(l({ref:t},m),{},{components:n})):a.createElement(k,l({ref:t},m))}));function c(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,l=new Array(o);l[0]=p;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:r,l[1]=i;for(var d=2;d<o;d++)l[d]=n[d];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}p.displayName="MDXCreateElement"},208:(e,t,n)=>{n.d(t,{Z:()=>l});var a=n(9496),r=n(5924);const o="tabItem_IPoj";function l(e){let{children:t,hidden:n,className:l}=e;return a.createElement("div",{role:"tabpanel",className:(0,r.Z)(o,l),hidden:n},t)}},4210:(e,t,n)=>{n.d(t,{Z:()=>c});var a=n(4250),r=n(9496),o=n(5924),l=n(4375),i=n(4436),s=n(7883),d=n(4930);const m="tabList_xr86",u="tabItem_r4_W";function p(e){var t;const{lazy:n,block:l,defaultValue:p,values:c,groupId:k,className:h}=e,f=r.Children.map(e.children,(e=>{if((0,r.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),g=c??f.map((e=>{let{props:{value:t,label:n,attributes:a}}=e;return{value:t,label:n,attributes:a}})),y=(0,i.l)(g,((e,t)=>e.value===t.value));if(y.length>0)throw new Error(`Docusaurus error: Duplicate values "${y.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const N=null===p?p:p??(null==(t=f.find((e=>e.props.default)))?void 0:t.props.value)??f[0].props.value;if(null!==N&&!g.some((e=>e.value===N)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${N}" but none of its children has the corresponding value. Available values are: ${g.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:b,setTabGroupChoices:v}=(0,s.U)(),[w,C]=(0,r.useState)(N),T=[],{blockElementScrollPositionUntilNextRender:x}=(0,d.o5)();if(null!=k){const e=b[k];null!=e&&e!==w&&g.some((t=>t.value===e))&&C(e)}const O=e=>{const t=e.currentTarget,n=T.indexOf(t),a=g[n].value;a!==w&&(x(t),C(a),null!=k&&v(k,String(a)))},j=e=>{var t;let n=null;switch(e.key){case"Enter":O(e);break;case"ArrowRight":{const t=T.indexOf(e.currentTarget)+1;n=T[t]??T[0];break}case"ArrowLeft":{const t=T.indexOf(e.currentTarget)-1;n=T[t]??T[T.length-1];break}}null==(t=n)||t.focus()};return r.createElement("div",{className:(0,o.Z)("tabs-container",m)},r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.Z)("tabs",{"tabs--block":l},h)},g.map((e=>{let{value:t,label:n,attributes:l}=e;return r.createElement("li",(0,a.Z)({role:"tab",tabIndex:w===t?0:-1,"aria-selected":w===t,key:t,ref:e=>T.push(e),onKeyDown:j,onClick:O},l,{className:(0,o.Z)("tabs__item",u,null==l?void 0:l.className,{"tabs__item--active":w===t})}),n??t)}))),n?(0,r.cloneElement)(f.filter((e=>e.props.value===w))[0],{className:"margin-top--md"}):r.createElement("div",{className:"margin-top--md"},f.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==w})))))}function c(e){const t=(0,l.Z)();return r.createElement(p,(0,a.Z)({key:String(t)},e))}},4958:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>m,contentTitle:()=>s,default:()=>c,frontMatter:()=>i,metadata:()=>d,toc:()=>u});var a=n(4250),r=(n(9496),n(9613)),o=n(208),l=n(4210);const i={sidebar_position:2},s="Models",d={unversionedId:"essentials/models",id:"essentials/models",title:"Models",description:"- Defining basic models with attributes and relationships",source:"@site/docs/essentials/models.mdx",sourceDirName:"essentials",slug:"/essentials/models",permalink:"/func-model/docs/essentials/models",draft:!1,editUrl:"https://github.com/paul-thebaud/func-model/tree/main/website/docs/essentials/models.mdx",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Getting started",permalink:"/func-model/docs/essentials/getting-started"},next:{title:"Actions",permalink:"/func-model/docs/essentials/actions"}},m={},u=[{value:"Model factory",id:"model-factory",level:2},{value:"Extending a model class",id:"extending-a-model-class",level:3},{value:"Schema",id:"schema",level:2},{value:"Attributes",id:"attributes",level:3},{value:"Configuration",id:"configuration",level:4},{value:"Transform",id:"transform",level:4},{value:"Relations",id:"relations",level:3},{value:"Configuration",id:"configuration-1",level:4},{value:"Extensions",id:"extensions",level:2},{value:"Hooks",id:"hooks",level:2}],p={toc:u};function c(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"models"},"Models"),(0,r.kt)("admonition",{title:"What you'll learn",type:"tip"},(0,r.kt)("ul",{parentName:"admonition"},(0,r.kt)("li",{parentName:"ul"},"Defining basic models with attributes and relationships"),(0,r.kt)("li",{parentName:"ul"},"Extending your models with extensions and classes"))),(0,r.kt)("h2",{id:"model-factory"},"Model factory"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"import { makeModel } from 'func-model/core';\n\nmakeModel('type', { /* schema */ }, { /* extensions */ })\n")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"makeModel")," is a model factory function to use when you wish to define your\nmodels. It takes 3 arguments:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"The string ",(0,r.kt)("inlineCode",{parentName:"li"},"type")," or a configuration."),(0,r.kt)("li",{parentName:"ul"},"The optional ",(0,r.kt)("inlineCode",{parentName:"li"},"schema")," of the model: an object map containing attributes and\nrelations definition."),(0,r.kt)("li",{parentName:"ul"},"The optional ",(0,r.kt)("inlineCode",{parentName:"li"},"extensions")," of the model: some custom properties you wish to add\nto your model to extends its features.")),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"schema")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"extension")," represent the ",(0,r.kt)("inlineCode",{parentName:"p"},"definition")," of the model."),(0,r.kt)("h3",{id:"extending-a-model-class"},"Extending a model class"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"makeModel")," will return a model class which can be extended by an ES6 class."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"export default class Post extends makeModel('Post') {}\n")),(0,r.kt)("p",null,"The returned model class also provides static methods to extend the schema and\nextensions already provided to ",(0,r.kt)("inlineCode",{parentName:"p"},"makeModel"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"makeModel('Post')\n  .schema({ /* additional schema */ })\n  .extension({ /* additional extension */ })\n  .extend({\n    schema: {/* additional schema */ },\n    extension: {/* additional extension */ },\n  });\n")),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"This can be useful when sharing common features across models: creation\ntimestamps, client side ID generation, etc."),(0,r.kt)("p",{parentName:"admonition"},"If you wish to learn more about the composition capabilities of models,\nyou should read the\n",(0,r.kt)("a",{parentName:"p",href:"/docs/advanced/models-composition"},"advanced guide about models composition"),".")),(0,r.kt)("h2",{id:"schema"},"Schema"),(0,r.kt)("h3",{id:"attributes"},"Attributes"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"attr")," is an attribute definition factory function to use when you wish to\ndefine your model's attributes. It may take 0 to 2 arguments, depending on\nwhat you want to do."),(0,r.kt)(l.Z,{groupId:"language",defaultValue:"ts",values:[{label:"TypeScript",value:"ts"},{label:"JavaScript",value:"js"}],mdxType:"Tabs"},(0,r.kt)(o.Z,{value:"ts",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"import { attr, toDate } from 'func-model/core';\n\nattr<string>(); // Without options.\nattr(toDate()); // With a transformer.\nattr({ default: '', transformer: toDate() }); // With options.\nattr(toDate(), { readonly: true }); // With a transformer and options.\n"))),(0,r.kt)(o.Z,{value:"js",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"import { attr, toDate } from 'func-model/core';\n\nattr(); // Without options.\nattr(toDate()); // With a transformer.\nattr({ default: '', transformer: toDate() }); // With options.\nattr(toDate(), { readonly: true }); // With a transformer and options.\n")))),(0,r.kt)("h4",{id:"configuration"},"Configuration"),(0,r.kt)("p",null,"You may customize your attribute with the following options:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Key"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Defaults"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"transformer")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Transform<T>")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"undefined")),(0,r.kt)("td",{parentName:"tr",align:null},"The transformer for the prop's value when interacting with your backend.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"default")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"T")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"undefined")),(0,r.kt)("td",{parentName:"tr",align:null},"The default value for the prop when initializing a model instance.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"readonly")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"boolean")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"false")),(0,r.kt)("td",{parentName:"tr",align:null},"The value won't be serialized when sending the data to your backend.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"alias")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"string")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"undefined")),(0,r.kt)("td",{parentName:"tr",align:null},"The key to (de)serialize the prop's value from/in when interacting with your backend.")))),(0,r.kt)("h4",{id:"transform"},"Transform"),(0,r.kt)("p",null,"You can use a transform to convert an attribute value when (de)serializing from/to your backend.\nThere are two types or transformer within FuncModel:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"FunctionTransform"),": a function to call to transform the value whether we are serializing or deserializing it."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"ObjectTransform"),": an object with two methods: ",(0,r.kt)("inlineCode",{parentName:"li"},"serialize")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"deserialize"),".")),(0,r.kt)("p",null,"FuncModel propose you 4 transformers out of the box: ",(0,r.kt)("inlineCode",{parentName:"p"},"toDate"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"toNumber"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"toBoolean")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"toString"),"."),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"You may need other transformers in your implementation, for example when you\nare using a library to manage dates (momentjs, dayjs, etc.)."),(0,r.kt)("p",{parentName:"admonition"},"You may read the\n",(0,r.kt)("a",{parentName:"p",href:"/docs/advanced/custom-transformers"},"advanced guide on transformers"),"\nto learn more about those.")),(0,r.kt)("h3",{id:"relations"},"Relations"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"hasMany")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"hasOne")," are relation definition factory function to use when\nyou wish to define your model's relations. As suggested by their names,\n",(0,r.kt)("inlineCode",{parentName:"p"},"hasMany")," represents a relation to a list of model and ",(0,r.kt)("inlineCode",{parentName:"p"},"hasOne")," represents a\nrelation to a single model.\nIt may take 0 to 1 argument, depending on what you want to do."),(0,r.kt)(l.Z,{groupId:"language",defaultValue:"ts",values:[{label:"TypeScript",value:"ts"},{label:"JavaScript",value:"js"}],mdxType:"Tabs"},(0,r.kt)(o.Z,{value:"ts",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"import { hasOne, hasMany } from 'func-model/core';\nimport type User from './user';\nimport type Comment from './comment';\n\nhasOne<User>(); // Without options.\nhasOne<User>({ readonly: true }); // With options.\n\nhasMany<Comment>(); // Without options.\nhasMany<Comment>({ readonly: true }); // With options.\n"))),(0,r.kt)(o.Z,{value:"js",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"import { hasOne, hasMany } from 'func-model/core';\n\nhasOne(); // Without options.\nhasOne({ readonly: true }); // With options.\n\nhasMany(); // Without options.\nhasMany({ readonly: true }); // With options.\n")))),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"When using TypeScript, you should define the type of the relation to get a\nfully strongly typed model. We suggest you to use ",(0,r.kt)("inlineCode",{parentName:"p"},"import type")," to avoid\ncreating circular dependencies when having circular model relations.")),(0,r.kt)("h4",{id:"configuration-1"},"Configuration"),(0,r.kt)("p",null,"You may customize your relation with the following options:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Key"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Defaults"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"default")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"T")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"undefined")),(0,r.kt)("td",{parentName:"tr",align:null},"The default value for the prop when initializing a model instance.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"readonly")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"boolean")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"false")),(0,r.kt)("td",{parentName:"tr",align:null},"The value won't be serialized when sending the data to your backend.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"alias")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"string")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"undefined")),(0,r.kt)("td",{parentName:"tr",align:null},"The key to (de)serialize the prop's value from/in when interacting with your backend.")))),(0,r.kt)("h2",{id:"extensions"},"Extensions"),(0,r.kt)("p",null,"Sometimes, a model is not only composed by attributes and relations. As an\nexample, a ",(0,r.kt)("inlineCode",{parentName:"p"},"User")," model may have first name and last name attributes, and a\nconvenience method to retrieve the full name."),(0,r.kt)("p",null,"To solve this, you may extend the model class created by ",(0,r.kt)("inlineCode",{parentName:"p"},"makeModel"),", or pass\nan extension as the ",(0,r.kt)("inlineCode",{parentName:"p"},"makeModel")," call third arguments."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"// Using an extension.\nexport default makeModel('users', {\n  firstName: attr(),\n  lastName: attr(),\n}, {\n  get fullName() {\n    return `${this.firstName} ${this.lastName}`\n  }\n});\n\n// Using an ES6 class.\nexport default class User extends makeModel('users', {\n  firstName: attr(),\n  lastName: attr(),\n}) {\n  get fullName() {\n    return `${this.firstName} ${this.lastName}`\n  }\n}\n")),(0,r.kt)("h2",{id:"hooks"},"Hooks"),(0,r.kt)("span",{class:"chip chip--primary"},"Work in progress"))}c.isMDXComponent=!0}}]);
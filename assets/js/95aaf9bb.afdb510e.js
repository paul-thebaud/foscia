"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[637],{9613:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>m});var a=n(9496);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),c=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},p=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,s=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),p=c(n),m=r,h=p["".concat(s,".").concat(m)]||p[m]||d[m]||l;return n?a.createElement(h,o(o({ref:t},u),{},{components:n})):a.createElement(h,o({ref:t},u))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,o=new Array(l);o[0]=p;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:r,o[1]=i;for(var c=2;c<l;c++)o[c]=n[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}p.displayName="MDXCreateElement"},208:(e,t,n)=>{n.d(t,{Z:()=>o});var a=n(9496),r=n(5924);const l="tabItem_IPoj";function o(e){let{children:t,hidden:n,className:o}=e;return a.createElement("div",{role:"tabpanel",className:(0,r.Z)(l,o),hidden:n},t)}},4210:(e,t,n)=>{n.d(t,{Z:()=>m});var a=n(4250),r=n(9496),l=n(5924),o=n(4375),i=n(4436),s=n(7883),c=n(4930);const u="tabList_xr86",d="tabItem_r4_W";function p(e){var t;const{lazy:n,block:o,defaultValue:p,values:m,groupId:h,className:k}=e,v=r.Children.map(e.children,(e=>{if((0,r.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),f=m??v.map((e=>{let{props:{value:t,label:n,attributes:a}}=e;return{value:t,label:n,attributes:a}})),g=(0,i.l)(f,((e,t)=>e.value===t.value));if(g.length>0)throw new Error(`Docusaurus error: Duplicate values "${g.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const y=null===p?p:p??(null==(t=v.find((e=>e.props.default)))?void 0:t.props.value)??v[0].props.value;if(null!==y&&!f.some((e=>e.value===y)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${y}" but none of its children has the corresponding value. Available values are: ${f.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:N,setTabGroupChoices:x}=(0,s.U)(),[b,w]=(0,r.useState)(y),C=[],{blockElementScrollPositionUntilNextRender:E}=(0,c.o5)();if(null!=h){const e=N[h];null!=e&&e!==b&&f.some((t=>t.value===e))&&w(e)}const A=e=>{const t=e.currentTarget,n=C.indexOf(t),a=f[n].value;a!==b&&(E(t),w(a),null!=h&&x(h,String(a)))},T=e=>{var t;let n=null;switch(e.key){case"Enter":A(e);break;case"ArrowRight":{const t=C.indexOf(e.currentTarget)+1;n=C[t]??C[0];break}case"ArrowLeft":{const t=C.indexOf(e.currentTarget)-1;n=C[t]??C[C.length-1];break}}null==(t=n)||t.focus()};return r.createElement("div",{className:(0,l.Z)("tabs-container",u)},r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,l.Z)("tabs",{"tabs--block":o},k)},f.map((e=>{let{value:t,label:n,attributes:o}=e;return r.createElement("li",(0,a.Z)({role:"tab",tabIndex:b===t?0:-1,"aria-selected":b===t,key:t,ref:e=>C.push(e),onKeyDown:T,onClick:A},o,{className:(0,l.Z)("tabs__item",d,null==o?void 0:o.className,{"tabs__item--active":b===t})}),n??t)}))),n?(0,r.cloneElement)(v.filter((e=>e.props.value===b))[0],{className:"margin-top--md"}):r.createElement("div",{className:"margin-top--md"},v.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==b})))))}function m(e){const t=(0,o.Z)();return r.createElement(p,(0,a.Z)({key:String(t)},e))}},1048:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>c,default:()=>h,frontMatter:()=>s,metadata:()=>u,toc:()=>p});var a=n(4250),r=n(9496),l=n(9613);n(208),n(4210);function o(e){let{children:t,color:n}=e;return r.createElement("span",{className:`chip ${n&&`chip--${n}`}`},t)}function i(e){let{children:t,version:n,only:a,requires:l,provides:i}=e;return r.createElement("div",{style:{marginBottom:"12px"}},n&&r.createElement(o,null,n),a&&r.createElement(o,{color:"primary"},"only: ",a),l&&r.createElement(o,{color:"danger"},"requires: ",l),i&&r.createElement(o,{color:"success"},"provides: ",i),t)}const s={sidebar_position:3},c="Actions",u={unversionedId:"essentials/actions",id:"essentials/actions",title:"Actions",description:"- Building actions",source:"@site/docs/essentials/actions.mdx",sourceDirName:"essentials",slug:"/essentials/actions",permalink:"/func-model/docs/essentials/actions",draft:!1,editUrl:"https://github.com/paul-thebaud/func-model/tree/main/website/docs/essentials/actions.mdx",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Models",permalink:"/func-model/docs/essentials/models"},next:{title:"Advanced",permalink:"/func-model/docs/category/advanced"}},d={},p=[{value:"Enhancing and running",id:"enhancing-and-running",level:3},{value:"Hooks",id:"hooks",level:3},{value:"Note on enhancers and runners",id:"note-on-enhancers-and-runners",level:2},{value:'<Chip color="primary">Work in progress</Chip> Available enhancers',id:"work-in-progress-available-enhancers",level:2},{value:"<code>context</code>",id:"context",level:3},{value:"Example",id:"example",level:4},{value:"Arguments",id:"arguments",level:4},{value:"<code>model</code>",id:"model",level:3},{value:"Example",id:"example-1",level:4},{value:"Arguments",id:"arguments-1",level:4},{value:"<code>include</code>",id:"include",level:3},{value:"Example",id:"example-2",level:4},{value:"Arguments",id:"arguments-2",level:4},{value:"<code>fields</code>",id:"fields",level:3},{value:"Example",id:"example-3",level:4},{value:"Arguments",id:"arguments-3",level:4},{value:"<code>fieldsFor</code>",id:"fieldsfor",level:3},{value:"Example",id:"example-4",level:4},{value:"Arguments",id:"arguments-4",level:4},{value:"<code>sortBy</code>",id:"sortby",level:3},{value:"Example",id:"example-5",level:4},{value:"Arguments",id:"arguments-5",level:4},{value:"<code>sortByDesc</code>",id:"sortbydesc",level:3},{value:"Example",id:"example-6",level:4},{value:"Arguments",id:"arguments-6",level:4},{value:'<Chip color="primary">Work in progress</Chip>  Available runners',id:"work-in-progress--available-runners",level:2},{value:"<code>none</code>",id:"none",level:3},{value:"Example",id:"example-7",level:4},{value:"Returns",id:"returns",level:4},{value:"<code>all</code>",id:"all",level:3},{value:"Example",id:"example-8",level:4},{value:"Returns",id:"returns-1",level:4}],m={toc:p};function h(e){let{components:t,...n}=e;return(0,l.kt)("wrapper",(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"actions"},"Actions"),(0,l.kt)("admonition",{title:"What you'll learn",type:"tip"},(0,l.kt)("ul",{parentName:"admonition"},(0,l.kt)("li",{parentName:"ul"},"Building actions"),(0,l.kt)("li",{parentName:"ul"},"Placing hooks on actions"),(0,l.kt)("li",{parentName:"ul"},"Available context enhancers"),(0,l.kt)("li",{parentName:"ul"},"Available context runners"))),(0,l.kt)("admonition",{title:"Requirements",type:"caution"},(0,l.kt)("p",{parentName:"admonition"},"Before reading this guide, you should have a working action factory. You can\nread the ",(0,l.kt)("a",{parentName:"p",href:"/docs/essentials/getting-started#your-first-actions"},(0,l.kt)("strong",{parentName:"a"},"getting started guide")),"\nto quickly create your own action factory.")),(0,l.kt)("h3",{id:"enhancing-and-running"},"Enhancing and running"),(0,l.kt)("p",null,"As stated in the ",(0,l.kt)("a",{parentName:"p",href:"/docs/discover#concept"},"discover guide"),", actions are\ninstantiated through your action factory, evolved with context enhancers and\nran by context runners."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-javascript"},"const posts = await action()\n  .use(model(Post))\n  .use(include('comments'))\n  .run(all());\n")),(0,l.kt)("p",null,"In the example above:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"action()")," is your action factory"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"model(Post)")," and ",(0,l.kt)("inlineCode",{parentName:"li"},"include('comments')")," are context enhancers which we ",(0,l.kt)("inlineCode",{parentName:"li"},"use")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"all()")," is a context runner which we ",(0,l.kt)("inlineCode",{parentName:"li"},"run"))),(0,l.kt)("p",null,"When you instantiate a new action, you can ",(0,l.kt)("inlineCode",{parentName:"p"},"use")," multiple context enhancers.\nThose enhancers will be queued until the ",(0,l.kt)("inlineCode",{parentName:"p"},"run")," call."),(0,l.kt)("p",null,"An enhancer take the action with a given context and enhancer its context. It\nmight use other enhancers. An enhancer may return an instance of an action\nor void."),(0,l.kt)("p",null,"A runner take the action with its context and use it to return a result. It\nmight use other enhancers and runners. A runner may return any result (\nincluding void, throwing error, etc.)."),(0,l.kt)("h3",{id:"hooks"},"Hooks"),(0,l.kt)("p",null,"Every action will trigger hooks when running. There are 4 hooks available.\nYou may register any hooks you want to use. The ",(0,l.kt)("inlineCode",{parentName:"p"},"hook")," method will\nregister an additional hook, whereas the ",(0,l.kt)("inlineCode",{parentName:"p"},"hooks")," method will replace all\nexisting hooks by the given ones."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-javascript"},"action()\n  .hook('onRunning', ({ context }) => /* ... */)\n  .hook('onSuccess', ({ context, result }) => /* ... */)\n  .hook('onError', ({ context, error }) => /* ... */)\n  .hook('onFinally', ({ context }) => /* ... */);\n")),(0,l.kt)("p",null,"You can also disable or enable an action instance hooks execution at any time.\nThis will also prevent any FuncModel hooks from executing."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-javascript"},"const myAction = action();\n// Disable hooks execution.\nmyAction.withoutHooks();\n// Re-enable hooks execution.\nmyAction.withHooks();\n")),(0,l.kt)("admonition",{type:"info"},(0,l.kt)("p",{parentName:"admonition"},"FuncModel will also register hooks when using some enhancers. Those will\nprovide some library features (models hooks, etc.).")),(0,l.kt)("h2",{id:"note-on-enhancers-and-runners"},"Note on enhancers and runners"),(0,l.kt)("p",null,"Any context enhancers or runners in this guide may:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)(o,{mdxType:"Chip"},"depend")," on a minimal package version"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)(o,{color:"primary",mdxType:"Chip"},"only")," be available in a given use case (JSON:API, etc.)"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)(o,{color:"success",mdxType:"Chip"},"provide")," a given context to next enhancers or runners"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)(o,{color:"danger",mdxType:"Chip"},"require")," a given context from previous enhancers or runners")),(0,l.kt)("p",null,"Most runners will execute an action through the adapter."),(0,l.kt)("p",null,"The examples will omit imports of your action factories or models to\nprovide shorter examples."),(0,l.kt)("h2",{id:"work-in-progress-available-enhancers"},(0,l.kt)(o,{color:"primary",mdxType:"Chip"},"Work in progress")," Available enhancers"),(0,l.kt)("h3",{id:"context"},(0,l.kt)("inlineCode",{parentName:"h3"},"context")),(0,l.kt)("p",null,"Merge the given context into the action's current context.\n",(0,l.kt)("strong",{parentName:"p"},"The context is not deeply merged.")),(0,l.kt)("p",null,"This is the most basic context enhancer. It is used by a lot of FuncModel\nenhancers."),(0,l.kt)("h4",{id:"example"},"Example"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-javascript"},"import { context } from 'func-model/core';\n\naction().use(context({ method: 'GET', path: 'hello-world' }));\n")),(0,l.kt)("h4",{id:"arguments"},"Arguments"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"/docs/api#actioncontext"},(0,l.kt)("inlineCode",{parentName:"a"},"{Partial<ActionContext>}"))," ",(0,l.kt)("inlineCode",{parentName:"li"},"contextToMerge"),"\nthe context to merge into the action's current context")),(0,l.kt)("h3",{id:"model"},(0,l.kt)("inlineCode",{parentName:"h3"},"model")),(0,l.kt)(i,{provides:"Definition, Model",mdxType:"FunctionInfo"}),(0,l.kt)("p",null,"Target the given model.\nRegister the given model and its definition onto the action's current context."),(0,l.kt)("h4",{id:"example-1"},"Example"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-javascript"},"import { model } from 'func-model/core';\n\naction().use(model(Post));\n")),(0,l.kt)("h4",{id:"arguments-1"},"Arguments"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"/docs/api#modeld-i"},(0,l.kt)("inlineCode",{parentName:"a"},"{Model<D, I>}"))," ",(0,l.kt)("inlineCode",{parentName:"li"},"modelToUse")," the model class to use")),(0,l.kt)("h3",{id:"include"},(0,l.kt)("inlineCode",{parentName:"h3"},"include")),(0,l.kt)(i,{requires:"Definition",mdxType:"FunctionInfo"}),(0,l.kt)("p",null,"Eager load the given relations for the current model definition. It accepts\ndeep relations through dot notation. The new relations will be merged with the\nprevious ones."),(0,l.kt)("h4",{id:"example-2"},"Example"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-javascript"},"import { include } from 'func-model/core';\n\naction().use(include(['author', 'comments', 'comments.reactions']));\n")),(0,l.kt)("h4",{id:"arguments-2"},"Arguments"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"/docs/api#modelrelationdotkeyd"},(0,l.kt)("inlineCode",{parentName:"a"},"{Arrayable<ModelRelationDotKey<D>>}")),(0,l.kt)("inlineCode",{parentName:"li"},"relations")," a relation or a set of relation to eager load")),(0,l.kt)("h3",{id:"fields"},(0,l.kt)("inlineCode",{parentName:"h3"},"fields")),(0,l.kt)(i,{only:"JSON:API",requires:"Model",mdxType:"FunctionInfo"}),(0,l.kt)("p",null,"Select the given\n",(0,l.kt)("a",{parentName:"p",href:"https://jsonapi.org/format/#fetching-sparse-fieldsets"},"JSON:API fieldsets"),"\nfor the current context's model. The new fieldsets will be merged with the\nprevious ones."),(0,l.kt)("h4",{id:"example-3"},"Example"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-javascript"},"import { fields } from 'func-model/json-api';\n\naction().use(fields(['title', 'description']));\n")),(0,l.kt)("h4",{id:"arguments-3"},"Arguments"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"/docs/api#modelvaluesd"},(0,l.kt)("inlineCode",{parentName:"a"},"{Arrayable<ModelKey<D>>}"))," ",(0,l.kt)("inlineCode",{parentName:"li"},"fieldset")," a\nfield or a set of field to select for the current context's model")),(0,l.kt)("h3",{id:"fieldsfor"},(0,l.kt)("inlineCode",{parentName:"h3"},"fieldsFor")),(0,l.kt)(i,{only:"JSON:API",mdxType:"FunctionInfo"}),(0,l.kt)("p",null,"Select the given\n",(0,l.kt)("a",{parentName:"p",href:"https://jsonapi.org/format/#fetching-sparse-fieldsets"},"JSON:API fieldsets"),"\nfor the given model. The new fieldsets will be merged with the\nprevious ones."),(0,l.kt)("h4",{id:"example-4"},"Example"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-javascript"},"import { fieldsFor } from 'func-model/json-api';\n\naction().use(fieldsFor(Post, ['title', 'description']));\n")),(0,l.kt)("h4",{id:"arguments-4"},"Arguments"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"/docs/api#modelclassd"},(0,l.kt)("inlineCode",{parentName:"a"},"{ModelClass<D>}"))," ",(0,l.kt)("inlineCode",{parentName:"li"},"model")," the model\nto select the fieldsets for"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"/docs/api#modelvaluesd"},(0,l.kt)("inlineCode",{parentName:"a"},"{Arrayable<ModelKey<D>>}"))," ",(0,l.kt)("inlineCode",{parentName:"li"},"fieldset")," a\nfield or a set of field to select for the given model")),(0,l.kt)("h3",{id:"sortby"},(0,l.kt)("inlineCode",{parentName:"h3"},"sortBy")),(0,l.kt)(i,{only:"JSON:API",mdxType:"FunctionInfo"}),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://jsonapi.org/format/#fetching-sorting"},"Sort the JSON:API resource"),"\nby the given key and direction. The new sort will be merged with the\nprevious ones. ",(0,l.kt)("strong",{parentName:"p"},"Sorts priority are kept"),"."),(0,l.kt)("h4",{id:"example-5"},"Example"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-javascript"},"import { sortBy } from 'func-model/json-api';\n\naction().use(sortBy('createdAt'));\n")),(0,l.kt)("h4",{id:"arguments-5"},"Arguments"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"{string}")," ",(0,l.kt)("inlineCode",{parentName:"li"},"key")," the key for the sort"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"{'asc' | 'desc' = 'asc'}")," ",(0,l.kt)("inlineCode",{parentName:"li"},"direction")," the direction for the sort")),(0,l.kt)("h3",{id:"sortbydesc"},(0,l.kt)("inlineCode",{parentName:"h3"},"sortByDesc")),(0,l.kt)(i,{only:"JSON:API",mdxType:"FunctionInfo"}),(0,l.kt)("p",null,"Shortcut for the ",(0,l.kt)("a",{parentName:"p",href:"#sortby"},(0,l.kt)("inlineCode",{parentName:"a"},"sortBy")," function")," with a ",(0,l.kt)("inlineCode",{parentName:"p"},"desc")," direction."),(0,l.kt)("h4",{id:"example-6"},"Example"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-javascript"},"import { sortByDesc } from 'func-model/json-api';\n\naction().use(sortByDesc('createdAt'));\n")),(0,l.kt)("h4",{id:"arguments-6"},"Arguments"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"{string}")," ",(0,l.kt)("inlineCode",{parentName:"li"},"key")," the key for the sort")),(0,l.kt)("h2",{id:"work-in-progress--available-runners"},(0,l.kt)(o,{color:"primary",mdxType:"Chip"},"Work in progress"),"  Available runners"),(0,l.kt)("h3",{id:"none"},(0,l.kt)("inlineCode",{parentName:"h3"},"none")),(0,l.kt)(i,{requires:"Adapter",mdxType:"FunctionInfo"}),(0,l.kt)("p",null,"Run the action through the adapter without using the result.\nAdapter errors may still occur."),(0,l.kt)("h4",{id:"example-7"},"Example"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-javascript"},"import { none } from 'func-model/core';\n\nawait action().run(none());\n")),(0,l.kt)("h4",{id:"returns"},"Returns"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"{Promise<void>}")),(0,l.kt)("h3",{id:"all"},(0,l.kt)("inlineCode",{parentName:"h3"},"all")),(0,l.kt)(i,{requires:"Adapter, Deserializer, Model",mdxType:"FunctionInfo"}),(0,l.kt)("p",null,"Retrieve an array of targeted model's instances."),(0,l.kt)("h4",{id:"example-8"},"Example"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-javascript"},"import { all } from 'func-model/core';\n\nconst posts = await action().run(all());\n")),(0,l.kt)("h4",{id:"returns-1"},"Returns"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"{Promise<I[]>}")," where ",(0,l.kt)("inlineCode",{parentName:"p"},"I")," is an instance of the targeted model."))}h.isMDXComponent=!0}}]);
"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[90],{9613:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>m});var a=n(9496);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),c=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},u=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),d=c(n),m=r,h=d["".concat(l,".").concat(m)]||d[m]||p[m]||o;return n?a.createElement(h,s(s({ref:t},u),{},{components:n})):a.createElement(h,s({ref:t},u))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,s=new Array(o);s[0]=d;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:r,s[1]=i;for(var c=2;c<o;c++)s[c]=n[c];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},208:(e,t,n)=>{n.d(t,{Z:()=>s});var a=n(9496),r=n(5924);const o="tabItem_IPoj";function s(e){let{children:t,hidden:n,className:s}=e;return a.createElement("div",{role:"tabpanel",className:(0,r.Z)(o,s),hidden:n},t)}},4210:(e,t,n)=>{n.d(t,{Z:()=>m});var a=n(4250),r=n(9496),o=n(5924),s=n(4375),i=n(4436),l=n(7883),c=n(4930);const u="tabList_xr86",p="tabItem_r4_W";function d(e){var t;const{lazy:n,block:s,defaultValue:d,values:m,groupId:h,className:f}=e,y=r.Children.map(e.children,(e=>{if((0,r.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),g=m??y.map((e=>{let{props:{value:t,label:n,attributes:a}}=e;return{value:t,label:n,attributes:a}})),b=(0,i.l)(g,((e,t)=>e.value===t.value));if(b.length>0)throw new Error(`Docusaurus error: Duplicate values "${b.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const k=null===d?d:d??(null==(t=y.find((e=>e.props.default)))?void 0:t.props.value)??y[0].props.value;if(null!==k&&!g.some((e=>e.value===k)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${k}" but none of its children has the corresponding value. Available values are: ${g.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:v,setTabGroupChoices:w}=(0,l.U)(),[N,x]=(0,r.useState)(k),T=[],{blockElementScrollPositionUntilNextRender:C}=(0,c.o5)();if(null!=h){const e=v[h];null!=e&&e!==N&&g.some((t=>t.value===e))&&x(e)}const P=e=>{const t=e.currentTarget,n=T.indexOf(t),a=g[n].value;a!==N&&(C(t),x(a),null!=h&&w(h,String(a)))},A=e=>{var t;let n=null;switch(e.key){case"Enter":P(e);break;case"ArrowRight":{const t=T.indexOf(e.currentTarget)+1;n=T[t]??T[0];break}case"ArrowLeft":{const t=T.indexOf(e.currentTarget)-1;n=T[t]??T[T.length-1];break}}null==(t=n)||t.focus()};return r.createElement("div",{className:(0,o.Z)("tabs-container",u)},r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.Z)("tabs",{"tabs--block":s},f)},g.map((e=>{let{value:t,label:n,attributes:s}=e;return r.createElement("li",(0,a.Z)({role:"tab",tabIndex:N===t?0:-1,"aria-selected":N===t,key:t,ref:e=>T.push(e),onKeyDown:A,onClick:P},s,{className:(0,o.Z)("tabs__item",p,null==s?void 0:s.className,{"tabs__item--active":N===t})}),n??t)}))),n?(0,r.cloneElement)(y.filter((e=>e.props.value===N))[0],{className:"margin-top--md"}):r.createElement("div",{className:"margin-top--md"},y.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==N})))))}function m(e){const t=(0,s.Z)();return r.createElement(d,(0,a.Z)({key:String(t)},e))}},7953:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>l,default:()=>m,frontMatter:()=>i,metadata:()=>c,toc:()=>p});var a=n(4250),r=(n(9496),n(9613)),o=n(208),s=n(4210);const i={sidebar_position:1},l="Discover",c={unversionedId:"discover",id:"discover",title:"Discover",description:"What is FuncClient?",source:"@site/docs/discover.mdx",sourceDirName:".",slug:"/discover",permalink:"/func-client/docs/discover",draft:!1,editUrl:"https://github.com/paul-thebaud/func-client/tree/main/website/docs/discover.mdx",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",next:{title:"Installation",permalink:"/func-client/docs/installation"}},u={},p=[{value:"What is FuncClient?",id:"what-is-funcclient",level:2},{value:"Concept",id:"concept",level:2},{value:"Model",id:"model",level:3},{value:"Action factory",id:"action-factory",level:3},{value:"Actions",id:"actions",level:3},{value:"FAQ",id:"faq",level:2},{value:"Why are we not using big <code>Model</code> and <code>Builder</code> classes?",id:"why-are-we-not-using-big-model-and-builder-classes",level:3},{value:"Is it strongly typed?",id:"is-it-strongly-typed",level:3},{value:"Why classes are used for models in Typescript?",id:"why-classes-are-used-for-models-in-typescript",level:3},{value:"What our the downsides of FuncClient approach?",id:"what-our-the-downsides-of-funcclient-approach",level:3}],d={toc:p};function m(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"discover"},"Discover"),(0,r.kt)("h2",{id:"what-is-funcclient"},"What is FuncClient?"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"FuncClient")," is a simple functional programming oriented API client. It is\nframework-agnostic and can integrate with any Web app using Javascript or\nTypescript."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Modular, highly extensible and fully tree shakable thanks to functional\nprogramming. ",(0,r.kt)("a",{parentName:"li",href:"#why-are-we-not-using-big-model-and-builder-classes"},"See the benefits")),(0,r.kt)("li",{parentName:"ul"},"Ready to use functions to integrate with any ",(0,r.kt)("a",{parentName:"li",href:"https://jsonapi.org/"},"JSON:API")),(0,r.kt)("li",{parentName:"ul"},"Strongly typed everywhere, with generics typings on models, actions, etc."),(0,r.kt)("li",{parentName:"ul"},"Dependency free (JSON:API adapter is based\non ",(0,r.kt)("a",{parentName:"li",href:"https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API"},"fetch API"),")"),(0,r.kt)("li",{parentName:"ul"},"(coming soon) Fully linted, tested and documented")),(0,r.kt)("h2",{id:"concept"},"Concept"),(0,r.kt)("h3",{id:"model"},"Model"),(0,r.kt)(s.Z,{groupId:"language",defaultValue:"ts",values:[{label:"TypeScript",value:"ts"},{label:"JavaScript",value:"js"}],mdxType:"Tabs"},(0,r.kt)(o.Z,{value:"ts",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"import { makeModel, attr, hasMany, toDate } from 'func-client/core';\nimport type Comment from './comment';\n\nexport default class Post extends makeModel('posts', {\n  title: attr<string>(),\n  description: attr<string>(),\n  publishedAt: attr(toDate()),\n  comments: hasMany<Comment>(),\n}, {\n  get isDraft() {\n    return !this.publishedAt;\n  },\n}) {\n}\n"))),(0,r.kt)(o.Z,{value:"js",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"import { makeModel, attr, hasMany, toDate } from 'func-client/core';\n\nexport default class Post extends makeModel('posts', {\n    title: attr(),\n    description: attr(),\n    publishedAt: attr(toDate()),\n    comments: hasMany(),\n}, {\n    get isDraft() {\n        return !this.publishedAt;\n    },\n}) {\n}\n")))),(0,r.kt)("p",null,"Models represent the structure of your data. A model is a composed class and can\nbe instantiated. Models are composed of three things:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"The ",(0,r.kt)("strong",{parentName:"li"},"configuration"),". In most case, it is only the ",(0,r.kt)("strong",{parentName:"li"},"type")," which uniquely\nreferences the model class."),(0,r.kt)("li",{parentName:"ul"},"The ",(0,r.kt)("strong",{parentName:"li"},"schema"),". It is an object composed of ",(0,r.kt)("strong",{parentName:"li"},"relationships")," (with other\nmodels) and ",(0,r.kt)("strong",{parentName:"li"},"attributes")," (primitive or not)."),(0,r.kt)("li",{parentName:"ul"},"The ",(0,r.kt)("strong",{parentName:"li"},"Extensions")," which add custom features to your model instances (e.g.\nfull name getter for a ",(0,r.kt)("inlineCode",{parentName:"li"},"User")," model, etc.).")),(0,r.kt)("h3",{id:"action-factory"},"Action factory"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"import { makeJsonApi } from 'func-client/blueprints';\nimport Post from './post';\nimport Comment from './comment';\n\nconst { makeAction, store } = makeJsonApi({\n  baseURL: 'https://example.com/api/v1',\n});\n\nstore.register([Post, Comment]);\n\nexport default function action() {\n  return makeAction();\n}\n")),(0,r.kt)("p",null,"Action factory is function which creates a new action with a preconfigured\ncontext. The context of an action will impact the action sent data and result:\nit may impact the serialization, the request, etc."),(0,r.kt)("h3",{id:"actions"},"Actions"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"import { model, include, all, none, destroy } from 'func-client/core';\nimport { filter } from 'func-client/json-api';\n\n// GET /api/v1/posts?filter[isPublished]=0&include=comments\nconst posts = await action()\n  .use(model(Post))\n  .use(filter('isPublished', '1'))\n  .use(include('comments'))\n  .run(all());\n\n// DELETE /api/v1/posts/<post-id>\nawait action()\n  .use(destroy(posts[0]))\n  .run(none());\n")),(0,r.kt)("p",null,"Actions are the way you make interaction between your models and your backend.\nThere are three steps to an action:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"instantiation")," using your own action factory with its dependencies (adapter,\nserializer, etc.)."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"use")," of context enhancers to affect the context of the action (change the\npath, change the affected model, change some query params, etc.)."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"run")," of a context runner to execute the action and retrieve a result.")),(0,r.kt)("p",null,"The context of the action can be changed to pretty everything and the typings\nare correctly propagated, making it a secure and easy way of building action\nusing Typescript or Javascript. You can use built-in enhancers or write your\nowns easily."),(0,r.kt)("p",null,"Context enhancers can be async as they are queued until run of the context\nrunner."),(0,r.kt)("h2",{id:"faq"},"FAQ"),(0,r.kt)("h3",{id:"why-are-we-not-using-big-model-and-builder-classes"},"Why are we not using big ",(0,r.kt)("inlineCode",{parentName:"h3"},"Model")," and ",(0,r.kt)("inlineCode",{parentName:"h3"},"Builder")," classes?"),(0,r.kt)("p",null,"In a lot of frameworks, modeling the data and building the query are done\nthrough two main classes: the ",(0,r.kt)("inlineCode",{parentName:"p"},"Model")," and the ",(0,r.kt)("inlineCode",{parentName:"p"},"Builder"),"."),(0,r.kt)("p",null,"The goal of FuncClient is to provide a lot of simple function to affect model\ninstances or their context. If all of those functions were included in classes,\nit will be in your final production bundle even if you are not using them.\nThanks to the way FuncClient works, ",(0,r.kt)("strong",{parentName:"p"},"all unused models helpers or actions\nenhancers/runners can be tree shaken.")),(0,r.kt)("h3",{id:"is-it-strongly-typed"},"Is it strongly typed?"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Yes!")," FuncClient makes great use of Typescript generics to provide strongly\ntyped models objects and contexts changes."),(0,r.kt)("p",null,"Here are a short example of the capabilities reusing the previous examples:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="post.ts"',title:'"post.ts"'},"import { makeModel, attr, hasMany, toDate } from 'func-client/core';\n\nclass Post extends makeModel('posts', {\n  title: attr({ default: '' }), // Infered to string.\n  description: attr<string>(), // Custom types are also supported.\n  createdAt: attr(toDate()), // Infered from transformers.\n  publishedAt: attr<Date | null>(toDate()),\n  comments: hasMany<Comment>(),\n}, {\n  // `this` context is available and strongly typed in extensions.\n  get isPublished() {\n    return !!this.publishedAt;\n  },\n}) {\n  // `this` context is also available and strongly typed in classes body.\n  shortenDescription() {\n    return this.description.substring(0, 50);\n  }\n}\n")),(0,r.kt)("p",null,"Strongly typed models are used by context enhancers to provide strongly typed\nparameters."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"const posts = await action()\n  // We are telling the action context is now for the Post model.\n  .use(model(Post))\n  // We can now use this action context to strongly type context enhancer params.\n  // As an example, `include` is typed for deep dotted relations, such as:\n  // \"comments\", \"comments.author\", \"comments.author.favoritePosts\", etc.\n  .use(include('comments'))\n  // As another example, `fields` is typed for direct attributes or relationships of the model.\n  .use(fields('title', 'description', 'comments'))\n  .run(all());\n")),(0,r.kt)("h3",{id:"why-classes-are-used-for-models-in-typescript"},"Why classes are used for models in Typescript?"),(0,r.kt)("p",null,"We extend the ",(0,r.kt)("inlineCode",{parentName:"p"},"makeModel")," call when using Typescript to be able to\nonly ",(0,r.kt)("inlineCode",{parentName:"p"},"import type")," of the class type when typing our relations."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"This prevents dependency cycles.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="comment.ts"',title:'"comment.ts"'},"export default class Comment extends makeModel('posts') {\n}\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="post.ts"',title:'"post.ts"'},"// Notice the `import type` usage instead of simple `import`.\nimport type Comment from './comment';\n\nexport default class Post extends makeModel('posts', {\n  comments: hasMany<Comment>(),\n}) {\n}\n")),(0,r.kt)("h3",{id:"what-our-the-downsides-of-funcclient-approach"},"What our the downsides of FuncClient approach?"),(0,r.kt)("p",null,"When declaring models, there are no clear downside of the functional\nprogramming, as ",(0,r.kt)("inlineCode",{parentName:"p"},"this")," context is still available in extensions and classes\nbody."),(0,r.kt)("p",null,"But, since we are not building the action factory for you, you must initialize\nthis factory yourself with the things you need: an adapter, a serializer, etc.\nDon't worry, the process is still pretty simple."),(0,r.kt)("p",null,"In addition, you cannot just use ",(0,r.kt)("inlineCode",{parentName:"p"},"action().model(Post).all()")," because those\nfunction must be imported to be used. We are thinking of a way to simply extends\nthe action with reusable function, but that's not currently possible regarding\nthe way Typescript manage types (generics of context enhancers and runners\nwould be lost)."))}m.isMDXComponent=!0}}]);
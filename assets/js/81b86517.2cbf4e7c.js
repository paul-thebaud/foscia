"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[978],{9613:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>m});var a=n(9496);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),c=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},p=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),p=c(n),m=r,f=p["".concat(l,".").concat(m)]||p[m]||d[m]||o;return n?a.createElement(f,i(i({ref:t},u),{},{components:n})):a.createElement(f,i({ref:t},u))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=p;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:r,i[1]=s;for(var c=2;c<o;c++)i[c]=n[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}p.displayName="MDXCreateElement"},208:(e,t,n)=>{n.d(t,{Z:()=>i});var a=n(9496),r=n(5924);const o="tabItem_IPoj";function i(e){let{children:t,hidden:n,className:i}=e;return a.createElement("div",{role:"tabpanel",className:(0,r.Z)(o,i),hidden:n},t)}},4210:(e,t,n)=>{n.d(t,{Z:()=>m});var a=n(4250),r=n(9496),o=n(5924),i=n(4375),s=n(4436),l=n(7883),c=n(4930);const u="tabList_xr86",d="tabItem_r4_W";function p(e){var t;const{lazy:n,block:i,defaultValue:p,values:m,groupId:f,className:h}=e,y=r.Children.map(e.children,(e=>{if((0,r.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),g=m??y.map((e=>{let{props:{value:t,label:n,attributes:a}}=e;return{value:t,label:n,attributes:a}})),k=(0,s.l)(g,((e,t)=>e.value===t.value));if(k.length>0)throw new Error(`Docusaurus error: Duplicate values "${k.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const v=null===p?p:p??(null==(t=y.find((e=>e.props.default)))?void 0:t.props.value)??y[0].props.value;if(null!==v&&!g.some((e=>e.value===v)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${v}" but none of its children has the corresponding value. Available values are: ${g.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:w,setTabGroupChoices:b}=(0,l.U)(),[N,x]=(0,r.useState)(v),j=[],{blockElementScrollPositionUntilNextRender:T}=(0,c.o5)();if(null!=f){const e=w[f];null!=e&&e!==N&&g.some((t=>t.value===e))&&x(e)}const O=e=>{const t=e.currentTarget,n=j.indexOf(t),a=g[n].value;a!==N&&(T(t),x(a),null!=f&&b(f,String(a)))},z=e=>{var t;let n=null;switch(e.key){case"Enter":O(e);break;case"ArrowRight":{const t=j.indexOf(e.currentTarget)+1;n=j[t]??j[0];break}case"ArrowLeft":{const t=j.indexOf(e.currentTarget)-1;n=j[t]??j[j.length-1];break}}null==(t=n)||t.focus()};return r.createElement("div",{className:(0,o.Z)("tabs-container",u)},r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.Z)("tabs",{"tabs--block":i},h)},g.map((e=>{let{value:t,label:n,attributes:i}=e;return r.createElement("li",(0,a.Z)({role:"tab",tabIndex:N===t?0:-1,"aria-selected":N===t,key:t,ref:e=>j.push(e),onKeyDown:z,onClick:O},i,{className:(0,o.Z)("tabs__item",d,null==i?void 0:i.className,{"tabs__item--active":N===t})}),n??t)}))),n?(0,r.cloneElement)(y.filter((e=>e.props.value===N))[0],{className:"margin-top--md"}):r.createElement("div",{className:"margin-top--md"},y.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==N})))))}function m(e){const t=(0,i.Z)();return r.createElement(p,(0,a.Z)({key:String(t)},e))}},5293:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>l,default:()=>m,frontMatter:()=>s,metadata:()=>c,toc:()=>d});var a=n(4250),r=(n(9496),n(9613)),o=n(208),i=n(4210);const s={sidebar_position:1},l="Getting started",c={unversionedId:"essentials/getting-started",id:"essentials/getting-started",title:"Getting started",description:"Your first model",source:"@site/docs/essentials/getting-started.mdx",sourceDirName:"essentials",slug:"/essentials/getting-started",permalink:"/func-model/docs/essentials/getting-started",draft:!1,editUrl:"https://github.com/paul-thebaud/func-model/tree/main/website/docs/essentials/getting-started.mdx",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Essentials",permalink:"/func-model/docs/category/essentials"},next:{title:"Models",permalink:"/func-model/docs/essentials/models"}},u={},d=[{value:"Your first model",id:"your-first-model",level:2},{value:"Defining a model",id:"defining-a-model",level:3},{value:"Using models",id:"using-models",level:3},{value:"Action factory",id:"action-factory",level:2},{value:"Initializing the dependencies",id:"initializing-the-dependencies",level:3},{value:"Defining the action factory",id:"defining-the-action-factory",level:3},{value:"Running actions",id:"running-actions",level:2}],p={toc:d};function m(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"getting-started"},"Getting started"),(0,r.kt)("h2",{id:"your-first-model"},"Your first model"),(0,r.kt)("h3",{id:"defining-a-model"},"Defining a model"),(0,r.kt)("p",null,"To declare a model, you just need to use the ",(0,r.kt)("inlineCode",{parentName:"p"},"makeModel")," function. This function takes 3 arguments:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"The model ",(0,r.kt)("inlineCode",{parentName:"li"},"type"),", which is used by other services to identify your model or interact with an API."),(0,r.kt)("li",{parentName:"ul"},"The model ",(0,r.kt)("inlineCode",{parentName:"li"},"schema")," (optional), which contains your attributes and relations definitions."),(0,r.kt)("li",{parentName:"ul"},"The model ",(0,r.kt)("inlineCode",{parentName:"li"},"extension")," (optional), which contains additional properties and methods.")),(0,r.kt)(i.Z,{groupId:"language",defaultValue:"ts",values:[{label:"TypeScript",value:"ts"},{label:"JavaScript",value:"js"}],mdxType:"Tabs"},(0,r.kt)(o.Z,{value:"ts",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="models/user.js"',title:'"models/user.js"'},"import { makeModel, attr } from 'func-model/core';\n\nexport default class User extends makeModel('users', {\n  firstName: attr<string>(),\n  lastName: attr<string>(),\n}, {\n  get fullName() {\n    return `${this.firstName} ${this.lastName}`;\n  },\n}) {\n}\n"))),(0,r.kt)(o.Z,{value:"js",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="models/user.js"',title:'"models/user.js"'},"import { makeModel, attr } from 'func-model/core';\n\nexport default class User extends makeModel('users', {\n    firstName: attr(),\n    lastName: attr(),\n}, {\n    get fullName() {\n        return `${this.firstName} ${this.lastName}`;\n    },\n}) {\n}\n")))),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"If you never need to import only a model's type (such as in Typescript to avoid circular deps),\nyou can just export the ",(0,r.kt)("inlineCode",{parentName:"p"},"makeModel")," returned value instead of creating an extended class:"),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"export default makeModel('users', /* your model definition... */);\n")),(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("a",{parentName:"p",href:"/docs/discover#why-classes-are-used-for-models-in-typescript"},"Read the FAQ to understand the why."))),(0,r.kt)("h3",{id:"using-models"},"Using models"),(0,r.kt)("p",null,"You can use this model as any Javascript classes (e.g. construct a new instance using ",(0,r.kt)("inlineCode",{parentName:"p"},"new"),"). Once\nyou have an instance, you can use its schema and extensions as classic classes' properties and\nmethods."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"const user = new User();\nuser.firstName = 'John';\nuser.lastName = 'Doe';\nconsole.log(user.fullName); // \"John Doe\".\n")),(0,r.kt)("h2",{id:"action-factory"},"Action factory"),(0,r.kt)("p",null,"Once your models are set up, you will probably want to interact with a data store, such as an API.\nFor this, you will need an action factory which initialize a preconfigured context\nfor all your future action."),(0,r.kt)("p",null,"The following example of action factory is made for a JSON:API implementation."),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"Currently, FuncModel only have a JSON:API implementation of actions. However, you can easily\nimplement your own adapter and/or serialization mechanism to fit your needs."),(0,r.kt)("p",{parentName:"admonition"},"We are also opened to pull request to propose other implementations.")),(0,r.kt)("h3",{id:"initializing-the-dependencies"},"Initializing the dependencies"),(0,r.kt)("p",null,"Each action factory may require initial dependencies to correctly work. Each of those dependencies\nhave a dedicated role and is required for only specific cases. Here is an example with all\nthe available dependencies initialized."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript",metastring:'title="action.js"',title:'"action.js"'},"import { makeAction, makeStore, withAdapter, withDeserializer, withSerializer, withStore } from 'func-model/core';\nimport { makeDeserializer, makeFetchAdapter, makeSerializer } from 'func-model/json-api';\n\n// The store allows the deserializer and other dependencies to known\n// which types is associated with which model.\n// It is only required when you are deserializing related models not directly\n// targeted by an action (e.g. comments related to a post you fetch).\nconst store = makeStore().register([User, /* Post, Comment */]);\n\n// The serializer allows you to send model instance through your actions.\n// It is only required when you are making create/update operations.\nconst serializer = makeSerializer();\n\n// The deserializer allows you to retrieve model instance through your actions.\n// It is only required when you are making read operations.\nconst deserializer = makeDeserializer();\n\n// The adapter allows you to run actions.\nconst adapter = makeFetchAdapter({\n  // `baseURL` is optional and defaults to \"/api\".\n  baseURL: 'https://example.com/api/v1',\n});\n")),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"If you do not need a specific dependencies because you won't use the associated features,\nyou can simply omit its initialization and ",(0,r.kt)("inlineCode",{parentName:"p"},"use")," on the action factory.")),(0,r.kt)("h3",{id:"defining-the-action-factory"},"Defining the action factory"),(0,r.kt)("p",null,"Using your dependencies, you can now define your action factory function to preconfigure\nthe context for each next action."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript",metastring:'title="action.js"',title:'"action.js"'},"import { makeAction, withAdapter, withDeserializer, withSerializer, withStore } from 'func-model/core';\n\n// The action factory is a simple function returning an action\n// with a preconfigured context (avoiding repeating those `use` later).\nexport default function action() {\n  return makeAction()\n    .use(withStore(store))\n    .use(withSerializer(serializer))\n    .use(withDeserializer(deserializer))\n    .use(withAdapter(fetchAdapter));\n}\n")),(0,r.kt)("h2",{id:"running-actions"},"Running actions"),(0,r.kt)("p",null,"To run action, you can initialize a new action instance by calling your factory.\nWith this instance, you can call ",(0,r.kt)("strong",{parentName:"p"},"context enhancers")," through ",(0,r.kt)("inlineCode",{parentName:"p"},"use")," to modify\nthe action context.\nWhen you are ready, you can ",(0,r.kt)("inlineCode",{parentName:"p"},"run")," the action with a given ",(0,r.kt)("strong",{parentName:"p"},"context consumer"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"import { all, forModel } from 'func-model/core';\nimport User from './models/user';\nimport action from './action';\n\nconst users = await action()\n  .use(forModel(User))\n  .run(all());\n")),(0,r.kt)("p",null,"Generally in FuncModel, the context enhancers are doing the majority of work to\ncustomize the action you will run. Context consumers only exists to tell how\nyou wish to run the action and retrieve the result (raw response,\nmodel instance, etc.)."),(0,r.kt)("p",null,"A great example of this is when finding a model using its ID. You'll not use\na ",(0,r.kt)("inlineCode",{parentName:"p"},"find")," context consumer. Instead, you will need to use a ",(0,r.kt)("inlineCode",{parentName:"p"},"find")," context\nenhancer and a ",(0,r.kt)("inlineCode",{parentName:"p"},"oneOrFail")," context consumer. This way, you are able to do\na find query and retrieve a raw result when needed."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"import { find, oneOrFail, forModel } from 'func-model/core';\nimport User from './models/user';\nimport action from './action';\n\nconst user = await action()\n  .use(forModel(User))\n  .use(find('abc-123'))\n  .run(oneOrFail());\n")),(0,r.kt)("p",null,"This works the same to send write operations through actions. In the following\nexample, we are retrieving a raw adapter response instead of model instances."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"import { create, raw, forModel, fill } from 'func-model/core';\nimport User from './models/user';\nimport action from './action';\n\nconst user = fill(new User(), {\n  firstName: 'John',\n  lastName: 'Doe',\n});\n\nconst response = await action()\n  .use(create(user))\n  .run(raw());\n")),(0,r.kt)("p",null,"Finally, you may also want to use FuncModel to make non-standard API calls\nwhich are unrelated to models."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"import { knownData } from 'func-model/core';\nimport { makePost } from 'func-model/json-api';\nimport action from './action';\n\n// Make a POST call to \"https://example.com/api/v1/services/posts/1/publish\"\n// Admitting it returns: {\"message\":\"Successfully published post.\"}\nconst data = await action()\n  .use(makePost('services/posts/1/publish'))\n  .run(knownData());\n\nconsole.log(data.message); // \"Successfully published post.\"\n")),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("inlineCode",{parentName:"p"},"data")," consumer will return the adapter response data (for JSON:API, it is a JSON:API document)."),(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("inlineCode",{parentName:"p"},"knownData")," will return a generic type data (which defaults to any).")))}m.isMDXComponent=!0}}]);
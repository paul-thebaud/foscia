"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[978],{9613:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>p});var a=n(9496);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=a.createContext({}),c=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),m=c(n),p=o,f=m["".concat(l,".").concat(p)]||m[p]||d[p]||r;return n?a.createElement(f,i(i({ref:t},u),{},{components:n})):a.createElement(f,i({ref:t},u))}));function p(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,i=new Array(r);i[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:o,i[1]=s;for(var c=2;c<r;c++)i[c]=n[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},208:(e,t,n)=>{n.d(t,{Z:()=>i});var a=n(9496),o=n(5924);const r="tabItem_IPoj";function i(e){let{children:t,hidden:n,className:i}=e;return a.createElement("div",{role:"tabpanel",className:(0,o.Z)(r,i),hidden:n},t)}},4210:(e,t,n)=>{n.d(t,{Z:()=>p});var a=n(4250),o=n(9496),r=n(5924),i=n(4375),s=n(4436),l=n(7883),c=n(4930);const u="tabList_xr86",d="tabItem_r4_W";function m(e){var t;const{lazy:n,block:i,defaultValue:m,values:p,groupId:f,className:h}=e,y=o.Children.map(e.children,(e=>{if((0,o.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),g=p??y.map((e=>{let{props:{value:t,label:n,attributes:a}}=e;return{value:t,label:n,attributes:a}})),k=(0,s.l)(g,((e,t)=>e.value===t.value));if(k.length>0)throw new Error(`Docusaurus error: Duplicate values "${k.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const b=null===m?m:m??(null==(t=y.find((e=>e.props.default)))?void 0:t.props.value)??y[0].props.value;if(null!==b&&!g.some((e=>e.value===b)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${b}" but none of its children has the corresponding value. Available values are: ${g.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:v,setTabGroupChoices:w}=(0,l.U)(),[N,x]=(0,o.useState)(b),O=[],{blockElementScrollPositionUntilNextRender:j}=(0,c.o5)();if(null!=f){const e=v[f];null!=e&&e!==N&&g.some((t=>t.value===e))&&x(e)}const T=e=>{const t=e.currentTarget,n=O.indexOf(t),a=g[n].value;a!==N&&(j(t),x(a),null!=f&&w(f,String(a)))},I=e=>{var t;let n=null;switch(e.key){case"Enter":T(e);break;case"ArrowRight":{const t=O.indexOf(e.currentTarget)+1;n=O[t]??O[0];break}case"ArrowLeft":{const t=O.indexOf(e.currentTarget)-1;n=O[t]??O[O.length-1];break}}null==(t=n)||t.focus()};return o.createElement("div",{className:(0,r.Z)("tabs-container",u)},o.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.Z)("tabs",{"tabs--block":i},h)},g.map((e=>{let{value:t,label:n,attributes:i}=e;return o.createElement("li",(0,a.Z)({role:"tab",tabIndex:N===t?0:-1,"aria-selected":N===t,key:t,ref:e=>O.push(e),onKeyDown:I,onClick:T},i,{className:(0,r.Z)("tabs__item",d,null==i?void 0:i.className,{"tabs__item--active":N===t})}),n??t)}))),n?(0,o.cloneElement)(y.filter((e=>e.props.value===N))[0],{className:"margin-top--md"}):o.createElement("div",{className:"margin-top--md"},y.map(((e,t)=>(0,o.cloneElement)(e,{key:t,hidden:e.props.value!==N})))))}function p(e){const t=(0,i.Z)();return o.createElement(m,(0,a.Z)({key:String(t)},e))}},5293:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>l,default:()=>p,frontMatter:()=>s,metadata:()=>c,toc:()=>d});var a=n(4250),o=(n(9496),n(9613)),r=n(208),i=n(4210);const s={sidebar_position:1,description:"Defining your first model and action factory, running basic actions."},l="Getting started",c={unversionedId:"essentials/getting-started",id:"essentials/getting-started",title:"Getting started",description:"Defining your first model and action factory, running basic actions.",source:"@site/docs/essentials/getting-started.mdx",sourceDirName:"essentials",slug:"/essentials/getting-started",permalink:"/func-model/docs/essentials/getting-started",draft:!1,editUrl:"https://github.com/paul-thebaud/func-model/tree/main/website/docs/essentials/getting-started.mdx",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1,description:"Defining your first model and action factory, running basic actions."},sidebar:"tutorialSidebar",previous:{title:"Essentials",permalink:"/func-model/docs/category/essentials"},next:{title:"Models",permalink:"/func-model/docs/essentials/models"}},u={},d=[{value:"Your first model",id:"your-first-model",level:2},{value:"Defining a model",id:"defining-a-model",level:3},{value:"Using models",id:"using-models",level:3},{value:"Action factory with blueprints",id:"action-factory-with-blueprints",level:2},{value:"Running actions",id:"running-actions",level:2}],m={toc:d};function p(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"getting-started"},"Getting started"),(0,o.kt)("admonition",{title:"What you'll learn",type:"tip"},(0,o.kt)("ul",{parentName:"admonition"},(0,o.kt)("li",{parentName:"ul"},"Creating your first model and using it through model instances;"),(0,o.kt)("li",{parentName:"ul"},"Creating your action factory using blueprints for a JSON:API backend;"),(0,o.kt)("li",{parentName:"ul"},"Running basic actions on your models with your action factory;"))),(0,o.kt)("h2",{id:"your-first-model"},"Your first model"),(0,o.kt)("h3",{id:"defining-a-model"},"Defining a model"),(0,o.kt)("p",null,"To declare a model, you just need to use the ",(0,o.kt)("inlineCode",{parentName:"p"},"makeModel")," function. This function takes 3 arguments:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"The model ",(0,o.kt)("inlineCode",{parentName:"li"},"type"),", which is used by other services to identify your model or interact with an API."),(0,o.kt)("li",{parentName:"ul"},"The model ",(0,o.kt)("inlineCode",{parentName:"li"},"schema")," (optional), which contains your attributes and relations definitions."),(0,o.kt)("li",{parentName:"ul"},"The model ",(0,o.kt)("inlineCode",{parentName:"li"},"extension")," (optional), which contains additional properties and methods.")),(0,o.kt)(i.Z,{groupId:"language",defaultValue:"ts",values:[{label:"TypeScript",value:"ts"},{label:"JavaScript",value:"js"}],mdxType:"Tabs"},(0,o.kt)(r.Z,{value:"ts",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="models/user.js"',title:'"models/user.js"'},"import { makeModel, attr } from 'func-model/core';\n\nexport default class User extends makeModel('users', {\n  firstName: attr<string>(),\n  lastName: attr<string>(),\n}, {\n  get fullName() {\n    return `${this.firstName} ${this.lastName}`;\n  },\n}) {\n}\n"))),(0,o.kt)(r.Z,{value:"js",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="models/user.js"',title:'"models/user.js"'},"import { makeModel, attr } from 'func-model/core';\n\nexport default class User extends makeModel('users', {\n    firstName: attr(),\n    lastName: attr(),\n}, {\n    get fullName() {\n        return `${this.firstName} ${this.lastName}`;\n    },\n}) {\n}\n")))),(0,o.kt)("admonition",{type:"tip"},(0,o.kt)("p",{parentName:"admonition"},"If you never need to import only a model's type (such as in Typescript to avoid circular deps),\nyou can just export the ",(0,o.kt)("inlineCode",{parentName:"p"},"makeModel")," returned value instead of creating an extended class:"),(0,o.kt)("pre",{parentName:"admonition"},(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"export default makeModel('users', /* your model definition... */);\n")),(0,o.kt)("p",{parentName:"admonition"},(0,o.kt)("a",{parentName:"p",href:"/docs/discover#why-classes-are-used-for-models-in-typescript"},"Read the FAQ to understand the why."))),(0,o.kt)("h3",{id:"using-models"},"Using models"),(0,o.kt)("p",null,"You can use this model as any Javascript classes (e.g. construct a new instance using ",(0,o.kt)("inlineCode",{parentName:"p"},"new"),"). Once\nyou have an instance, you can use its schema and extensions as classic classes' properties and\nmethods."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"const user = new User();\nuser.firstName = 'John';\nuser.lastName = 'Doe';\nconsole.log(user.fullName); // \"John Doe\".\n")),(0,o.kt)("h2",{id:"action-factory-with-blueprints"},"Action factory with blueprints"),(0,o.kt)("p",null,"Once your models are set up, you will probably want to interact with a data store, such as an API.\nFor this, you will need an action factory which initialize a preconfigured context\nfor all your future action. Running actions using this action factory will be seen in the next part\nof this guide."),(0,o.kt)("p",null,"Blueprints provide a quick initialization of your action factory."),(0,o.kt)("p",null,"With the complete JSON:API action factory blueprint (named ",(0,o.kt)("inlineCode",{parentName:"p"},"makeJsonApi"),"), you can\nset up your action factory for a JSON:API by providing a root URL and the models it\ninteracts with."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript",metastring:'title="action.js"',title:'"action.js"'},"import { makeJsonApi } from 'func-model/blueprints';\n\nconst { makeAction, store } = makeJsonApi({\n  baseURL: 'https://example.com/api/v1',\n});\n\n// We need to register the models to allow the deserializer to know\n// to which model it should deserialize a JSON:API record.\nstore.register([User, /* Post, Comment */]);\n\nexport default function action() {\n  return makeAction();\n}\n")),(0,o.kt)("p",null,"In this example, ",(0,o.kt)("inlineCode",{parentName:"p"},"makeJsonApi")," will initialize all dependencies to read/write on a JSON:API.\nIt must only be called once, because instances may be cached after a read for example.\n",(0,o.kt)("inlineCode",{parentName:"p"},"makeAction")," is a default preconfigured action factory. It should be called on each new action\nyou are making, and not only once, because context enhancers are modifying the action context."),(0,o.kt)("admonition",{type:"caution"},(0,o.kt)("p",{parentName:"admonition"},"Using blueprints is a simple and quick way to set up an action factory. However, it has some downsides:"),(0,o.kt)("ul",{parentName:"admonition"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Only a JSON:API implementation of actions dependencies is available for now;")),(0,o.kt)("li",{parentName:"ul"},"You may not be able to configure all the behaviors you want;"),(0,o.kt)("li",{parentName:"ul"},"You may increase your bundle size by importing useless actions dependencies;")),(0,o.kt)("p",{parentName:"admonition"},"If you want more control over your action factory and dependencies, you should\nread ",(0,o.kt)("a",{parentName:"p",href:"#todo"},"the advanced guide on actions dependencies and factories (TODO)"),".")),(0,o.kt)("h2",{id:"running-actions"},"Running actions"),(0,o.kt)("p",null,"To run an action, you can initialize a new action instance by calling your factory.\nWith this instance, you can call ",(0,o.kt)("strong",{parentName:"p"},"context enhancers")," through ",(0,o.kt)("inlineCode",{parentName:"p"},"use")," to modify\nthe action context.\nWhen you are ready, you can ",(0,o.kt)("inlineCode",{parentName:"p"},"run")," the action with a given ",(0,o.kt)("strong",{parentName:"p"},"context consumer"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"import { all, forModel } from 'func-model/core';\nimport User from './models/user';\nimport action from './action';\n\nconst users = await action()\n  .use(forModel(User))\n  .run(all());\n")),(0,o.kt)("p",null,"Generally in FuncModel, the context enhancers are doing the majority of work to\ncustomize the action you will run. Context consumers only exists to tell how\nyou wish to run the action and retrieve the result (raw response,\nmodel instance, etc.)."),(0,o.kt)("p",null,"A great example of this is when finding a model using its ID. You'll not use\na ",(0,o.kt)("inlineCode",{parentName:"p"},"find")," context consumer. Instead, you will need to use a ",(0,o.kt)("inlineCode",{parentName:"p"},"find")," context\nenhancer and a ",(0,o.kt)("inlineCode",{parentName:"p"},"oneOrFail")," context consumer. This way, you are able to do\na find query and retrieve a raw result when needed."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"import { find, oneOrFail, forModel } from 'func-model/core';\nimport User from './models/user';\nimport action from './action';\n\nconst user = await action()\n  .use(forModel(User))\n  .use(find('abc-123'))\n  .run(oneOrFail());\n")),(0,o.kt)("p",null,"This works the same to send write operations through actions. In the following\nexample, we are retrieving a raw adapter response instead of model instances."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"import { create, raw, forModel, fill } from 'func-model/core';\nimport User from './models/user';\nimport action from './action';\n\nconst user = fill(new User(), {\n  firstName: 'John',\n  lastName: 'Doe',\n});\n\nconst response = await action()\n  .use(create(user))\n  .run(raw());\n")),(0,o.kt)("p",null,"Finally, you may also want to use FuncModel to make non-standard API calls\nwhich are unrelated to models."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"import { knownData } from 'func-model/core';\nimport { makePost } from 'func-model/json-api';\nimport action from './action';\n\n// Make a POST call to \"https://example.com/api/v1/services/posts/1/publish\"\n// Admitting it returns: {\"message\":\"Successfully published post.\"}\nconst data = await action()\n  .use(makePost('services/posts/1/publish'))\n  .run(knownData());\n\nconsole.log(data.message); // \"Successfully published post.\"\n")),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("p",{parentName:"admonition"},(0,o.kt)("inlineCode",{parentName:"p"},"data")," consumer will return the adapter response data (for JSON:API, it is a JSON:API document)."),(0,o.kt)("p",{parentName:"admonition"},(0,o.kt)("inlineCode",{parentName:"p"},"knownData")," will the same data but with a generic type (which defaults to any). This can be useful\nwhen creating non-standard JSON:API services.")))}p.isMDXComponent=!0}}]);
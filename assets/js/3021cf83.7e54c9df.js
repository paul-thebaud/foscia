"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[2538],{9613:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>m});var a=n(9496);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=a.createContext({}),c=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),d=c(n),m=o,f=d["".concat(l,".").concat(m)]||d[m]||p[m]||r;return n?a.createElement(f,i(i({ref:t},u),{},{components:n})):a.createElement(f,i({ref:t},u))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,i=new Array(r);i[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:o,i[1]=s;for(var c=2;c<r;c++)i[c]=n[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},208:(e,t,n)=>{n.d(t,{Z:()=>i});var a=n(9496),o=n(5924);const r="tabItem_IPoj";function i(e){let{children:t,hidden:n,className:i}=e;return a.createElement("div",{role:"tabpanel",className:(0,o.Z)(r,i),hidden:n},t)}},4210:(e,t,n)=>{n.d(t,{Z:()=>m});var a=n(4250),o=n(9496),r=n(5924),i=n(4375),s=n(4436),l=n(7883),c=n(4930);const u="tabList_xr86",p="tabItem_r4_W";function d(e){var t;const{lazy:n,block:i,defaultValue:d,values:m,groupId:f,className:h}=e,y=o.Children.map(e.children,(e=>{if((0,o.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),k=m??y.map((e=>{let{props:{value:t,label:n,attributes:a}}=e;return{value:t,label:n,attributes:a}})),g=(0,s.l)(k,((e,t)=>e.value===t.value));if(g.length>0)throw new Error(`Docusaurus error: Duplicate values "${g.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const b=null===d?d:d??(null==(t=y.find((e=>e.props.default)))?void 0:t.props.value)??y[0].props.value;if(null!==b&&!k.some((e=>e.value===b)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${b}" but none of its children has the corresponding value. Available values are: ${k.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:v,setTabGroupChoices:N}=(0,l.U)(),[w,x]=(0,o.useState)(b),T=[],{blockElementScrollPositionUntilNextRender:O}=(0,c.o5)();if(null!=f){const e=v[f];null!=e&&e!==w&&k.some((t=>t.value===e))&&x(e)}const j=e=>{const t=e.currentTarget,n=T.indexOf(t),a=k[n].value;a!==w&&(O(t),x(a),null!=f&&N(f,String(a)))},P=e=>{var t;let n=null;switch(e.key){case"Enter":j(e);break;case"ArrowRight":{const t=T.indexOf(e.currentTarget)+1;n=T[t]??T[0];break}case"ArrowLeft":{const t=T.indexOf(e.currentTarget)-1;n=T[t]??T[T.length-1];break}}null==(t=n)||t.focus()};return o.createElement("div",{className:(0,r.Z)("tabs-container",u)},o.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.Z)("tabs",{"tabs--block":i},h)},k.map((e=>{let{value:t,label:n,attributes:i}=e;return o.createElement("li",(0,a.Z)({role:"tab",tabIndex:w===t?0:-1,"aria-selected":w===t,key:t,ref:e=>T.push(e),onKeyDown:P,onClick:j},i,{className:(0,r.Z)("tabs__item",p,null==i?void 0:i.className,{"tabs__item--active":w===t})}),n??t)}))),n?(0,o.cloneElement)(y.filter((e=>e.props.value===w))[0],{className:"margin-top--md"}):o.createElement("div",{className:"margin-top--md"},y.map(((e,t)=>(0,o.cloneElement)(e,{key:t,hidden:e.props.value!==w})))))}function m(e){const t=(0,i.Z)();return o.createElement(d,(0,a.Z)({key:String(t)},e))}},3025:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>c,default:()=>f,frontMatter:()=>l,metadata:()=>u,toc:()=>d});var a=n(4250),o=(n(9496),n(9613)),r=n(4936),i=n(208),s=n(4210);const l={sidebar_position:20,toc_max_heading_level:4},c="Getting started",u={unversionedId:"getting-started",id:"getting-started",title:"Getting started",description:"-   Creating your first model and using it through model instances",source:"@site/docs/getting-started.mdx",sourceDirName:".",slug:"/getting-started",permalink:"/func-client/docs/getting-started",draft:!1,editUrl:"https://github.com/paul-thebaud/func-client/tree/main/website/docs/getting-started.mdx",tags:[],version:"current",sidebarPosition:20,frontMatter:{sidebar_position:20,toc_max_heading_level:4},sidebar:"docsSidebar",previous:{title:"Installation",permalink:"/func-client/docs/installation"},next:{title:"Models",permalink:"/func-client/docs/models"}},p={},d=[{value:"Your first model",id:"your-first-model",level:2},{value:"Defining a model",id:"defining-a-model",level:3},{value:"Using models classes",id:"using-models-classes",level:3},{value:"Your first actions",id:"your-first-actions",level:2},{value:"Action factory",id:"action-factory",level:3},{value:"With blueprints",id:"with-blueprints",level:4},{value:"Notice on blueprints",id:"notice-on-blueprints",level:4},{value:"Builder pattern syntax",id:"builder-pattern-syntax",level:4},{value:"Running simple actions",id:"running-simple-actions",level:3},{value:"Running HTTP custom actions",id:"running-http-custom-actions",level:3}],m={toc:d};function f(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"getting-started"},"Getting started"),(0,o.kt)("admonition",{title:"What you'll learn",type:"tip"},(0,o.kt)("ul",{parentName:"admonition"},(0,o.kt)("li",{parentName:"ul"},"Creating your first model and using it through model instances"),(0,o.kt)("li",{parentName:"ul"},"Creating your action factory using blueprints"),(0,o.kt)("li",{parentName:"ul"},"Running basic actions on your models with your action factory"))),(0,o.kt)("h2",{id:"your-first-model"},"Your first model"),(0,o.kt)("p",null,"Models represent the structure of your data and are used to simplify and\nstrongly type interactions with your data source."),(0,o.kt)("h3",{id:"defining-a-model"},"Defining a model"),(0,o.kt)("p",null,"To declare a model, you just need to use the ",(0,o.kt)("inlineCode",{parentName:"p"},"makeModel")," function. This function\ntakes up to 2 arguments:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"The model ",(0,o.kt)("inlineCode",{parentName:"li"},"type"),", which is used by other services to identify your model or\ninteract with a data source."),(0,o.kt)("li",{parentName:"ul"},"The model ",(0,o.kt)("inlineCode",{parentName:"li"},"definition"),", which contains your attributes/relations definitions\nand custom properties and methods.")),(0,o.kt)(s.Z,{groupId:"language",defaultValue:"ts",values:[{label:"TypeScript",value:"ts"},{label:"JavaScript",value:"js"}],mdxType:"Tabs"},(0,o.kt)(i.Z,{value:"ts",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="models/post.ts"',title:'"models/post.ts"'},"import { makeModel, attr, hasMany, toDate } from 'func-client/core';\nimport type Comment from './comment';\n\nexport default class Post extends makeModel('posts', {\n    title: attr<string>(),\n    description: attr<string>(),\n    publishedAt: attr<Date | undefined>(toDate()),\n    comments: hasMany<Comment>(),\n    get published() {\n        return !!this.publishedAt;\n    },\n}) {}\n"))),(0,o.kt)(i.Z,{value:"js",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="models/post.ts"',title:'"models/post.ts"'},"import { makeModel, attr, hasMany, toDate } from 'func-client/core';\n\nexport default class Post extends makeModel('posts', {\n    title: attr(),\n    description: attr(),\n    publishedAt: attr(toDate()),\n    comments: hasMany(),\n    get published() {\n        return !!this.publishedAt;\n    },\n}) {}\n")))),(0,o.kt)("admonition",{type:"tip"},(0,o.kt)("p",{parentName:"admonition"},"If you never need to import only a model's type (such as in Typescript to avoid\ncircular deps), you can directly use the ",(0,o.kt)("inlineCode",{parentName:"p"},"makeModel")," returned value instead of\nextending it: ",(0,o.kt)("inlineCode",{parentName:"p"},"export default makeModel('posts', {});")),(0,o.kt)("p",{parentName:"admonition"},(0,o.kt)("a",{parentName:"p",href:"/docs/faq#why-classes-are-used-for-models-in-typescript"},(0,o.kt)("strong",{parentName:"a"},"Read the FAQ to understand the why.")))),(0,o.kt)("h3",{id:"using-models-classes"},"Using models classes"),(0,o.kt)("p",null,"Model classes can be used as any classical ES6 class. It can be instantiated,\nmanipulated, etc. Properties will be defined on each instance from the model\ndefinition."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"const post = new Post();\npost.title = 'Hello World!';\npost.publishedAt = new Date();\nconsole.log(post.title); // \"Hello World!\"\nconsole.log(post.published); // true\nconsole.log(post.exists); // false\n")),(0,o.kt)(r.Z,{className:"button bg--primary-gradient",to:"/docs/models",mdxType:"Link"},"Read the full guide on models"),(0,o.kt)("h2",{id:"your-first-actions"},"Your first actions"),(0,o.kt)("h3",{id:"action-factory"},"Action factory"),(0,o.kt)("h4",{id:"with-blueprints"},"With blueprints"),(0,o.kt)("p",null,"Once your models are set up, you will probably want to interact with a data\nsource, such as an API. For this, you will need an action factory which\ninitialize a preconfigured context for all your future actions. Running actions\nusing this action factory will be seen in the\n",(0,o.kt)("a",{parentName:"p",href:"#running-simple-actions"},"next part of this guide"),"."),(0,o.kt)("p",null,"Blueprints provide a quick initialization of your action factory for different\ncommon use-cases. Currently, you may choose between the two available\nblueprints: ",(0,o.kt)("a",{parentName:"p",href:"https://jsonapi.org"},"JSON:API")," or JSON REST."),(0,o.kt)(s.Z,{groupId:"implementation",mdxType:"Tabs"},(0,o.kt)(i.Z,{value:"jsonapi",label:"JSON:API",default:!0,mdxType:"TabItem"},(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"makeJsonApi")," is a blueprint to quickly initiate an action factory to interact\nwith a normalized ",(0,o.kt)("a",{parentName:"p",href:"https://jsonapi.org"},"JSON:API backend"),". It provides all the\navailable tooling, such as a model registry, an instance cache, a serializer and\ndeserializer and an adapter."),(0,o.kt)("p",null,"You can read more details on this implementation on the\n",(0,o.kt)("a",{parentName:"p",href:"/docs/implementations/jsonapi"},"JSON:API page"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript",metastring:'title="action.js"',title:'"action.js"'},"import { makeJsonApi } from 'func-client/blueprints';\nimport Comment from './models/comment';\nimport Post from './models/post';\n\nconst { makeAction, registry } = makeJsonApi({\n    baseURL: 'https://example.com/api/v1',\n});\n\n// We need to register the models to allow the deserializer to know\n// to which model it should deserialize from an API record.\nregistry.register(Comment, Post /* User, Tag */);\n\nexport default function action() {\n    return makeAction();\n}\n"))),(0,o.kt)(i.Z,{value:"jsonrest",label:"JSON REST",mdxType:"TabItem"},(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"makeJsonRest")," is a blueprint to quickly initiate an action factory to interact\nwith a normalized JSON REST backend. It provides all the available tooling, such\nas a model registry, an instance cache, a serializer and deserializer and an\nadapter."),(0,o.kt)("p",null,"You can read more details on this implementation on the\n",(0,o.kt)("a",{parentName:"p",href:"/docs/implementations/jsonrest"},"JSON REST page"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript",metastring:'title="action.js"',title:'"action.js"'},"import { makeJsonRest } from 'func-client/blueprints';\nimport Comment from './models/comment';\nimport Post from './models/post';\n\nconst { makeAction, registry } = makeJsonRest({\n    baseURL: 'https://example.com/api/v1',\n});\n\n// We need to register the models to allow the deserializer to know\n// to which model it should deserialize from an API record.\nregistry.register(Comment, Post /* User, Tag */);\n\nexport default function action() {\n    return makeAction();\n}\n"))),(0,o.kt)(i.Z,{value:"other",label:"Other",mdxType:"TabItem"},(0,o.kt)("p",null,"For the moment, there is no other official implementation available besides\nJSON:API and JSON REST. You should therefore either:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/docs/implementations/custom"},(0,o.kt)("strong",{parentName:"a"},"Implement your own action's dependencies"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/paul-thebaud/func-client/issues"},(0,o.kt)("strong",{parentName:"a"},"Open an issue or a pull request")))))),(0,o.kt)("h4",{id:"notice-on-blueprints"},"Notice on blueprints"),(0,o.kt)("p",null,"Using blueprints is a simple and quick way to set up an action factory. However,\nit may have some downsides:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Only some implementations are available for now, so you may not found\nsomething which fits your needs"),(0,o.kt)("li",{parentName:"ul"},"Some dependencies (e.g. serializer in a readonly context) may imported even\nif you don't use them, and it may increase your production bundle size;"),(0,o.kt)("li",{parentName:"ul"},"Some behaviors may not be configurable;")),(0,o.kt)("p",null,"If you want more control over your action factory and its dependencies, you\nshould read\n",(0,o.kt)("a",{parentName:"p",href:"/docs/advanced/custom-action-factory"},(0,o.kt)("strong",{parentName:"a"},"the advanced guide on custom action factory")),"."),(0,o.kt)("h4",{id:"builder-pattern-syntax"},"Builder pattern syntax"),(0,o.kt)("p",null,"If you want to use the builder pattern syntax (e.g. ",(0,o.kt)("inlineCode",{parentName:"p"},"action().model(Post)"),"\ninstead of ",(0,o.kt)("inlineCode",{parentName:"p"},"action().use(model(Post))"),"), you should ",(0,o.kt)("inlineCode",{parentName:"p"},"extends")," your action with\nthe extensions packs you want to be available directly on your action."),(0,o.kt)("p",null,"For this, you may ",(0,o.kt)("inlineCode",{parentName:"p"},"extends")," the packs you want inside your ",(0,o.kt)("inlineCode",{parentName:"p"},"action")," function:"),(0,o.kt)(s.Z,{groupId:"implementation",mdxType:"Tabs"},(0,o.kt)(i.Z,{value:"jsonapi",label:"JSON:API",default:!0,mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"import { coreExtensions, crudExtensions, jsonApiExtensions } from 'func-client/blueprints';\n\nexport default action() {\n    return makeAction()\n        .extends({\n            ...coreExtensions,\n            ...crudExtensions,\n            ...jsonApiExtensions,\n        );\n}\n"))),(0,o.kt)(i.Z,{value:"jsonrest",label:"JSON REST",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"import { coreExtensions, crudExtensions, jsonRestExtensions } from 'func-client/blueprints';\n\nexport default action() {\n    return makeAction()\n        .extends({\n            ...coreExtensions,\n            ...crudExtensions,\n            ...jsonRestExtensions,\n        );\n}\n"))),(0,o.kt)(i.Z,{value:"other",label:"Other",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"import { coreExtensions, crudExtensions } from 'func-client/blueprints';\n\nexport default action() {\n    return makeAction()\n        .extends({\n            ...coreExtensions,\n            ...crudExtensions,\n        );\n}\n")))),(0,o.kt)("p",null,"You may ",(0,o.kt)("a",{parentName:"p",href:"/docs/actions#extensions"},"learn more about extensions"),",\ncheck the ",(0,o.kt)("a",{parentName:"p",href:"/docs/api/actions-extensions"},"available extensions packs")," or import\nmanually enhancers and runners extensions using the following code:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"import { model, include, all } from 'func-client/core';\nimport { makeAction } from 'func-client/blueprints';\n\nexport default function action() {\n    return makeAction().extends({\n        ...model.extension,\n        ...include.extension,\n        ...all.extension,\n    });\n}\n")),(0,o.kt)("h3",{id:"running-simple-actions"},"Running simple actions"),(0,o.kt)("p",null,"To run an action, you can initialize a new action instance by calling your\nfactory. With this instance, you can call ",(0,o.kt)("strong",{parentName:"p"},"context enhancers")," through ",(0,o.kt)("inlineCode",{parentName:"p"},"use")," to\nmodify the action context. When you are ready, you can ",(0,o.kt)("inlineCode",{parentName:"p"},"run")," the action with a\ngiven ",(0,o.kt)("strong",{parentName:"p"},"context runner"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"import { all, model } from 'func-client/core';\nimport Post from './models/post';\nimport action from './action';\n\nconst posts = await action().use(model(Post)).run(all());\n")),(0,o.kt)("p",null,"Generally in FuncClient, the context enhancers are doing the majority of work to\ncustomize the action you will run. Context runners only exists to tell how you\nwish to run the action and retrieve the result (raw result, model instance,\netc.)."),(0,o.kt)("p",null,"A great example of this is when finding a model using its ID. You'll not use a\n",(0,o.kt)("inlineCode",{parentName:"p"},"find")," context runner. Instead, you will need to use a ",(0,o.kt)("inlineCode",{parentName:"p"},"find")," context enhancer\nand a ",(0,o.kt)("inlineCode",{parentName:"p"},"oneOrFail")," context runner. This way, you are able to do a find query and\nretrieve a raw result when needed."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"import { find, oneOrFail } from 'func-client/core';\nimport Post from './models/post';\nimport action from './action';\n\nconst post = await action().use(find(Post, 'abc-123')).run(oneOrFail());\n")),(0,o.kt)("p",null,"This works the same to send write operations through actions. In the following\nexample, we are retrieving a raw adapter response instead of model instances."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"import { create, fill, oneOrCurrent } from 'func-client/core';\nimport Post from './models/post';\nimport action from './action';\n\nconst post = fill(new Post(), {\n    title: 'Hello World!',\n    description: 'Your first post',\n});\n\nconst response = await action().use(create(post)).run(oneOrCurrent());\n")),(0,o.kt)(r.Z,{className:"button bg--primary-gradient",to:"/docs/actions",mdxType:"Link"},"Read the full guide on actions"),(0,o.kt)("h3",{id:"running-http-custom-actions"},"Running HTTP custom actions"),(0,o.kt)("p",null,"Using JSON:API or JSON REST blueprints, you may also want to use FuncClient to\nmake non-standard API calls."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"import { instance, raw } from 'func-client/core';\nimport { makePost } from 'func-client/http';\nimport action from './action';\n\nconst post = await action().use(find(Post, 'abc-123')).run(oneOrFail());\n\n// Make a POST call to \"https://example.com/api/v1/services/posts/1/publish\"\nconst response = await action()\n    .use(instance(post))\n    .use(\n        makePost('publish', {\n            data: { publishedAt: new Date() },\n        }),\n    )\n    .run(raw());\n\n// This is a raw `fetch` Response object.\nconsole.log(response.status);\n")),(0,o.kt)("p",null,"This way, you can standardize all API calls across your application, even when\nthose are non JSON:API/JSON REST related."))}f.isMDXComponent=!0}}]);
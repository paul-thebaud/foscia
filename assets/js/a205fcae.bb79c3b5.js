"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[8536],{9613:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>k});var a=n(9496);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),u=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=u(e.components);return a.createElement(s.Provider,{value:t},e.children)},p="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),p=u(n),m=r,k=p["".concat(s,".").concat(m)]||p[m]||c[m]||o;return n?a.createElement(k,i(i({ref:t},d),{},{components:n})):a.createElement(k,i({ref:t},d))}));function k(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[p]="string"==typeof e?e:r,i[1]=l;for(var u=2;u<o;u++)i[u]=n[u];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},782:(e,t,n)=>{n.d(t,{Z:()=>i});var a=n(9496),r=n(5924);const o={tabItem:"tabItem_eDPh"};function i(e){let{children:t,hidden:n,className:i}=e;return a.createElement("div",{role:"tabpanel",className:(0,r.Z)(o.tabItem,i),hidden:n},t)}},1399:(e,t,n)=>{n.d(t,{Z:()=>v});var a=n(7366),r=n(9496),o=n(5924),i=n(8696),l=n(3442),s=n(6777),u=n(8435),d=n(4416);function p(e){return function(e){return r.Children.map(e,(e=>{if(!e||(0,r.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:t,label:n,attributes:a,default:r}}=e;return{value:t,label:n,attributes:a,default:r}}))}function c(e){const{values:t,children:n}=e;return(0,r.useMemo)((()=>{const e=t??p(n);return function(e){const t=(0,u.l)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,n])}function m(e){let{value:t,tabValues:n}=e;return n.some((e=>e.value===t))}function k(e){let{queryString:t=!1,groupId:n}=e;const a=(0,l.k6)(),o=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:t,groupId:n});return[(0,s._X)(o),(0,r.useCallback)((e=>{if(!o)return;const t=new URLSearchParams(a.location.search);t.set(o,e),a.replace({...a.location,search:t.toString()})}),[o,a])]}function f(e){const{defaultValue:t,queryString:n=!1,groupId:a}=e,o=c(e),[i,l]=(0,r.useState)((()=>function(e){let{defaultValue:t,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!m({value:t,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const a=n.find((e=>e.default))??n[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:t,tabValues:o}))),[s,u]=k({queryString:n,groupId:a}),[p,f]=function(e){let{groupId:t}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(t),[a,o]=(0,d.Nk)(n);return[a,(0,r.useCallback)((e=>{n&&o.set(e)}),[n,o])]}({groupId:a}),h=(()=>{const e=s??p;return m({value:e,tabValues:o})?e:null})();(0,r.useLayoutEffect)((()=>{h&&l(h)}),[h]);return{selectedValue:i,selectValue:(0,r.useCallback)((e=>{if(!m({value:e,tabValues:o}))throw new Error(`Can't select invalid tab value=${e}`);l(e),u(e),f(e)}),[u,f,o]),tabValues:o}}var h=n(4197);const g={tabList:"tabList_AXDX",tabItem:"tabItem_bAX3"};function y(e){let{className:t,block:n,selectedValue:l,selectValue:s,tabValues:u}=e;const d=[],{blockElementScrollPositionUntilNextRender:p}=(0,i.o5)(),c=e=>{const t=e.currentTarget,n=d.indexOf(t),a=u[n].value;a!==l&&(p(t),s(a))},m=e=>{let t=null;switch(e.key){case"Enter":c(e);break;case"ArrowRight":{const n=d.indexOf(e.currentTarget)+1;t=d[n]??d[0];break}case"ArrowLeft":{const n=d.indexOf(e.currentTarget)-1;t=d[n]??d[d.length-1];break}}t?.focus()};return r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.Z)("tabs",{"tabs--block":n},t)},u.map((e=>{let{value:t,label:n,attributes:i}=e;return r.createElement("li",(0,a.Z)({role:"tab",tabIndex:l===t?0:-1,"aria-selected":l===t,key:t,ref:e=>d.push(e),onKeyDown:m,onClick:c},i,{className:(0,o.Z)("tabs__item",g.tabItem,i?.className,{"tabs__item--active":l===t})}),n??t)})))}function N(e){let{lazy:t,children:n,selectedValue:a}=e;const o=(Array.isArray(n)?n:[n]).filter(Boolean);if(t){const e=o.find((e=>e.props.value===a));return e?(0,r.cloneElement)(e,{className:"margin-top--md"}):null}return r.createElement("div",{className:"margin-top--md"},o.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==a}))))}function b(e){const t=f(e);return r.createElement("div",{className:(0,o.Z)("tabs-container",g.tabList)},r.createElement(y,(0,a.Z)({},e,t)),r.createElement(N,(0,a.Z)({},e,t)))}function v(e){const t=(0,h.Z)();return r.createElement(b,(0,a.Z)({key:String(t)},e))}},2645:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>u,default:()=>f,frontMatter:()=>s,metadata:()=>d,toc:()=>c});var a=n(7366),r=(n(9496),n(9613)),o=n(782),i=n(1399),l=n(4135);const s={sidebar_position:100,description:"Define models with attributes, relations and hooks."},u="Models",d={unversionedId:"core-concepts/models",id:"core-concepts/models",title:"Models",description:"Define models with attributes, relations and hooks.",source:"@site/docs/core-concepts/models.mdx",sourceDirName:"core-concepts",slug:"/core-concepts/models",permalink:"/foscia/docs/core-concepts/models",draft:!1,editUrl:"https://github.com/paul-thebaud/foscia/tree/main/website/docs/core-concepts/models.mdx",tags:[],version:"current",lastUpdatedAt:1688508156,formattedLastUpdatedAt:"Jul 4, 2023",sidebarPosition:100,frontMatter:{sidebar_position:100,description:"Define models with attributes, relations and hooks."},sidebar:"docsSidebar",previous:{title:"Core concepts",permalink:"/foscia/docs/category/core-concepts"},next:{title:"Actions",permalink:"/foscia/docs/core-concepts/actions"}},p={},c=[{value:"Model factory",id:"model-factory",level:2},{value:"Extending a model class",id:"extending-a-model-class",level:3},{value:"Note on exported value",id:"note-on-exported-value",level:4},{value:"Using models classes",id:"using-models-classes",level:3},{value:"Definition",id:"definition",level:2},{value:"IDs",id:"ids",level:3},{value:"Transform",id:"transform",level:4},{value:"Attributes",id:"attributes",level:3},{value:"Configuration",id:"configuration",level:4},{value:"Transform",id:"transform-1",level:4},{value:"Relations",id:"relations",level:3},{value:"Configuration",id:"configuration-1",level:4},{value:"Readonly properties",id:"readonly-properties",level:3},{value:"Custom properties",id:"custom-properties",level:3},{value:"Hooks",id:"hooks",level:2}],m={toc:c},k="wrapper";function f(e){let{components:t,...n}=e;return(0,r.kt)(k,(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"models"},"Models"),(0,r.kt)("admonition",{title:"What you'll learn",type:"tip"},(0,r.kt)("ul",{parentName:"admonition"},(0,r.kt)("li",{parentName:"ul"},"Defining basic models with attributes and relations"),(0,r.kt)("li",{parentName:"ul"},"Extending your models with custom properties"),(0,r.kt)("li",{parentName:"ul"},"Registering hooks on models"))),(0,r.kt)("h2",{id:"model-factory"},"Model factory"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"makeModel")," is the default model factory function. It defines a new model using\n2 arguments and returns an ES6 class:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"The string ",(0,r.kt)("inlineCode",{parentName:"li"},"type")," or a ",(0,r.kt)("a",{parentName:"li",href:"/docs/guides/models/models-configuration"},"configuration object"),"."),(0,r.kt)("li",{parentName:"ul"},"The optional ",(0,r.kt)("inlineCode",{parentName:"li"},"definition")," of the model: an object map containing\nattributes/relations definitions and custom properties and methods.")),(0,r.kt)("p",null,"The attributes and relations definition represents the ",(0,r.kt)("inlineCode",{parentName:"p"},"schema")," of the model."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"import { makeModel, attr, hasMany, toDate } from 'foscia/core';\n\nmakeModel('posts', {\n    /* The model definition */\n    title: attr<string>(),\n    description: attr<string>(),\n    publishedAt: attr<Date | undefined>(toDate()),\n    comments: hasMany<Comment>(),\n    get published() {\n        return !!this.publishedAt;\n    },\n});\n")),(0,r.kt)("h3",{id:"extending-a-model-class"},"Extending a model class"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"makeModel")," will return a model class which can be extended by an ES6 class."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"export default class Post extends makeModel('posts') {}\n")),(0,r.kt)("p",null,"The returned model class also provides static methods to extend the definition\nalready provided to ",(0,r.kt)("inlineCode",{parentName:"p"},"makeModel"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"/* Initial model creation without definition */\nmakeModel('posts')\n    .extends({\n        title: attr<string>(),\n        description: attr<string>(),\n    })\n    .extends({\n        publishedAt: attr<Date | undefined>(toDate()),\n        get published() {\n            return !!this.publishedAt;\n        },\n    });\n")),(0,r.kt)("p",null,"This can be useful when sharing common features across models: creation\ntimestamps, client side ID generation, etc."),(0,r.kt)("p",null,"If you wish to learn more about the composition capabilities of models, you\nshould read the\n",(0,r.kt)("a",{parentName:"p",href:"/docs/guides/models/models-composition"},"advanced guide about models composition"),"."),(0,r.kt)("h4",{id:"note-on-exported-value"},"Note on exported value"),(0,r.kt)("p",null,"In many Foscia guides and examples, you will see that the ES6 class\nreturned by ",(0,r.kt)("inlineCode",{parentName:"p"},"makeModel")," is extended before exporting:\nwe use ",(0,r.kt)("inlineCode",{parentName:"p"},"export default class Post extends makeModel...")," instead of\n",(0,r.kt)("inlineCode",{parentName:"p"},"export default makeModel..."),"."),(0,r.kt)("p",null,"This has two benefits:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"When using TypeScript, it allows to only import the type of the class using\n",(0,r.kt)("inlineCode",{parentName:"li"},"import type Post from './models/post'")," and avoids circular\ndependencies when models have circular relationships"),(0,r.kt)("li",{parentName:"ul"},"It gives you more flexibility as you can quickly add custom properties and\nmethods in the future")),(0,r.kt)("p",null,"However, both syntax are valid. Use the one you prefer! \ud83e\udd84"),(0,r.kt)("h3",{id:"using-models-classes"},"Using models classes"),(0,r.kt)("p",null,"Model classes can be used like any ES6 class. It can be instantiated,\nmanipulated, etc. Properties will be defined on each instance from the model\ndefinition."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"const post = new Post();\npost.title = 'Hello World!';\npost.publishedAt = new Date();\nconsole.log(post.title); // \"Hello World!\"\nconsole.log(post.published); // true\nconsole.log(post.exists); // false\n")),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"Please note that most model's interaction (fetching, updating, etc.) are done\nthrough actions, you can\n",(0,r.kt)("a",{parentName:"p",href:"/docs/core-concepts/actions"},(0,r.kt)("strong",{parentName:"a"},"read the actions guide"))," to learn more\nabout those.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Foscia proposes you multiple utilities functions to interact with models")),(0,r.kt)(l.Z,{className:"button bg--primary",to:"/docs/reference/models-utilities",mdxType:"Link"},"Read the models' utilities API guide"),(0,r.kt)("h2",{id:"definition"},"Definition"),(0,r.kt)("admonition",{type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"You ",(0,r.kt)("strong",{parentName:"p"},"must")," not use ",(0,r.kt)("inlineCode",{parentName:"p"},"id"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"lid"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"type")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"exists")," as key of any\nattributes/relations/properties as those keys are internally used by Foscia\nor may be used by dependencies (e.g. JSON:API adapter).")),(0,r.kt)("h3",{id:"ids"},"IDs"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"id")," is an ID definition factory function used to define your\nmodel's IDs property. It takes 1 argument."),(0,r.kt)("p",null,"Foscia consider your IDs as ",(0,r.kt)("inlineCode",{parentName:"p"},"string"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"number")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"null")," values by default.\nEach model have ",(0,r.kt)("inlineCode",{parentName:"p"},"id")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"lid")," properties representing record identification.\nIf you want to change the typing of those properties or transform values, you\ncan use the ",(0,r.kt)("inlineCode",{parentName:"p"},"id")," function."),(0,r.kt)(i.Z,{groupId:"language",defaultValue:"ts",values:[{label:"TypeScript",value:"ts"},{label:"JavaScript",value:"js"}],mdxType:"Tabs"},(0,r.kt)(o.Z,{value:"ts",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"import { id, toString } from 'foscia/core';\n\nid<string>(); // Without config.\nid(toString()); // With a transformer.\n"))),(0,r.kt)(o.Z,{value:"js",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"import { id, toString } from 'foscia/core';\n\nid(); // Without config.\nid(toString()); // With a transformer.\n")))),(0,r.kt)("h4",{id:"transform"},"Transform"),(0,r.kt)("p",null,"IDs transform works the same as ",(0,r.kt)("a",{parentName:"p",href:"#transforms"},"attributes transform"),"."),(0,r.kt)("admonition",{type:"caution"},(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("inlineCode",{parentName:"p"},"id")," can only be used on ",(0,r.kt)("inlineCode",{parentName:"p"},"id")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"lid")," keyed model's properties.\nThere is currently no way of aliasing an ID in Foscia.\n",(0,r.kt)("a",{parentName:"p",href:"https://github.com/paul-thebaud/foscia/issues/new/choose"},"Please fill an issue"),"\nif this is something you need.")),(0,r.kt)("h3",{id:"attributes"},"Attributes"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"attr")," is an attribute definition factory function used to define your\nmodel's attributes. It takes 0 to 2 arguments, depending on what\nyou want to do."),(0,r.kt)("p",null,"Foscia consider your attributes as non-nullable values by default.\nWhen one of your model contains nullable attributes, you can pass a type\nto the factory (e.g. ",(0,r.kt)("inlineCode",{parentName:"p"},"attr<string | null>()"),") or set a default attribute value\n(e.g. ",(0,r.kt)("inlineCode",{parentName:"p"},"attr({ default: '' })"),")."),(0,r.kt)(i.Z,{groupId:"language",defaultValue:"ts",values:[{label:"TypeScript",value:"ts"},{label:"JavaScript",value:"js"}],mdxType:"Tabs"},(0,r.kt)(o.Z,{value:"ts",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"import { attr, toDate } from 'foscia/core';\n\nattr<string>(); // Without config.\nattr(toDate()); // With a transformer.\nattr({ default: null, transformer: toDate() }); // With config.\nattr(toDate(), { sync: 'retrieve' }); // With a transformer and config.\nattr({ default: () => [] }); // With a factory default (required for objects props).\n"))),(0,r.kt)(o.Z,{value:"js",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"import { attr, toDate } from 'foscia/core';\n\nattr(); // Without config.\nattr(toDate()); // With a transformer.\nattr({ default: null, transformer: toDate() }); // With config.\nattr(toDate(), { sync: 'retrieve' }); // With a transformer and config.\nattr({ default: () => [] }); // With a factory default (required for objects props).\n")))),(0,r.kt)("h4",{id:"configuration"},"Configuration"),(0,r.kt)("p",null,"You can customize your attribute with the following options:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Key"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Default"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"transformer")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Transform<T>")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"undefined")),(0,r.kt)("td",{parentName:"tr",align:null},"The transformer for the property's value when interacting with your backend.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"default")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"T")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"undefined")),(0,r.kt)("td",{parentName:"tr",align:null},"The default value for the property when initializing a model instance.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"alias")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"string")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"undefined")),(0,r.kt)("td",{parentName:"tr",align:null},"Alias of your backend key used for (de)serializing.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"sync")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"boolean \\| 'retrieve' \\| 'write'")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"true")),(0,r.kt)("td",{parentName:"tr",align:null},"Avoid retrieving/writing the property's value from/to the backend.")))),(0,r.kt)("h4",{id:"transform-1"},"Transform"),(0,r.kt)("p",null,"You can use a ",(0,r.kt)("inlineCode",{parentName:"p"},"transformer")," to convert an attribute value when (de)serializing\nfrom/to your data source. There are two types or transformer within Foscia:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"FunctionTransform"),": a function called to transform the value when\nserializing or deserializing."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"ObjectTransform"),": an object with two methods: ",(0,r.kt)("inlineCode",{parentName:"li"},"serialize")," and\n",(0,r.kt)("inlineCode",{parentName:"li"},"deserialize"),".")),(0,r.kt)("p",null,"Foscia propose you 4 transformers out of the box:\n",(0,r.kt)("a",{parentName:"p",href:"/docs/reference/api/modules/core#todate"},(0,r.kt)("inlineCode",{parentName:"a"},"toDate")),",\n",(0,r.kt)("a",{parentName:"p",href:"/docs/reference/api/modules/core#tonumber"},(0,r.kt)("inlineCode",{parentName:"a"},"toNumber")),",\n",(0,r.kt)("a",{parentName:"p",href:"/docs/reference/api/modules/core#toboolean"},(0,r.kt)("inlineCode",{parentName:"a"},"toBoolean"))," and\n",(0,r.kt)("a",{parentName:"p",href:"/docs/reference/api/modules/core#tostring"},(0,r.kt)("inlineCode",{parentName:"a"},"toString")),"."),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"You may need other transformers in your implementation, for example when you are\nusing a library to manage dates (momentjs, dayjs, etc.). You may read the\n",(0,r.kt)("a",{parentName:"p",href:"/docs/guides/models/custom-transformers"},(0,r.kt)("strong",{parentName:"a"},"advanced guide on transformers"))," to\nlearn more about those.")),(0,r.kt)("h3",{id:"relations"},"Relations"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"hasMany")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"hasOne")," are relation definition factory function used\nto define your model's relations. As suggested by their names, ",(0,r.kt)("inlineCode",{parentName:"p"},"hasMany"),"\nrepresents a relation to a list of models and ",(0,r.kt)("inlineCode",{parentName:"p"},"hasOne")," represents a relation to\na single model. Those take 0 to 1 argument, depending on what you want to do."),(0,r.kt)("p",null,"Foscia consider your relations as non-nullable values by default.\nWhen one of your model contains nullable relations, you can pass a type\nto the factory (e.g. ",(0,r.kt)("inlineCode",{parentName:"p"},"hasOne<User | null>()"),") or set a default relation value\n(e.g. ",(0,r.kt)("inlineCode",{parentName:"p"},"hasOne({ default: null as User | null })"),")."),(0,r.kt)("p",null,"Also consider that non-loaded relations will have a value of ",(0,r.kt)("inlineCode",{parentName:"p"},"undefined"),"."),(0,r.kt)(i.Z,{groupId:"language",defaultValue:"ts",values:[{label:"TypeScript",value:"ts"},{label:"JavaScript",value:"js"}],mdxType:"Tabs"},(0,r.kt)(o.Z,{value:"ts",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"import { hasOne, hasMany } from 'foscia/core';\nimport type User from './user';\nimport type Comment from './comment';\n\nhasOne<User>(); // Without config.\nhasOne<User>({ sync: 'retrieve' }); // With config.\nhasOne<User>('users'); // With explicit type.\nhasOne<User>({ type: 'users', sync: 'retrieve' }); // With explicit type.\n\nhasMany<Comment>(); // Without config.\nhasMany<Comment>({ sync: 'retrieve' }); // With config.\nhasMany<Comment>('comments'); // With explicit type.\nhasMany<Comment>({ type: 'comments', sync: 'retrieve' }); // With explicit type.\n"))),(0,r.kt)(o.Z,{value:"js",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"import { hasOne, hasMany } from 'foscia/core';\n\nhasOne(); // Without config.\nhasOne({ sync: 'retrieve' }); // With config.\nhasOne('users'); // With explicit type.\nhasOne({ type: 'users', sync: 'retrieve' }); // With explicit type.\n\nhasMany(); // Without config.\nhasMany({ sync: 'retrieve' }); // With config.\nhasMany('comments'); // With explicit type.\nhasMany({ type: 'comments', sync: 'retrieve' }); // With explicit type.\n")))),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"When using TypeScript, you should define the type of the relation to get a\ntype safe model. We suggest you to use ",(0,r.kt)("inlineCode",{parentName:"p"},"import type")," to avoid creating\ncircular dependencies when having circular model relations.")),(0,r.kt)("h4",{id:"configuration-1"},"Configuration"),(0,r.kt)("p",null,"You can customize your relation with the following options:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Key"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Default"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"default")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"T")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"undefined")),(0,r.kt)("td",{parentName:"tr",align:null},"The default value for the property when initializing a model instance.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"alias")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"string")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"undefined")),(0,r.kt)("td",{parentName:"tr",align:null},"Alias of your backend key used for (de)serializing.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"path")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"string")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"undefined")),(0,r.kt)("td",{parentName:"tr",align:null},"Path used to query the relation. Defaults to the relation's key.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"type")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"string")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"undefined")),(0,r.kt)("td",{parentName:"tr",align:null},"The explicit type of related model. Might be used by the deserializer to know which model to instantiate.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"sync")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"boolean \\| 'retrieve' \\| 'write'")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"true")),(0,r.kt)("td",{parentName:"tr",align:null},"Avoid retrieving/writing the property's value from/to the backend.")))),(0,r.kt)("h3",{id:"readonly-properties"},"Readonly properties"),(0,r.kt)("p",null,"You can make any ID, attribute or relation readonly using the ",(0,r.kt)("inlineCode",{parentName:"p"},"readOnly"),"\nmodifier function. ",(0,r.kt)("inlineCode",{parentName:"p"},"readOnly")," will work on ",(0,r.kt)("inlineCode",{parentName:"p"},"id"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"attr"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"hasOne"),"\nand ",(0,r.kt)("inlineCode",{parentName:"p"},"hasMany")," factories."),(0,r.kt)("p",null,"Making a property readonly will throw an error when trying to affect a value\nto it, and emit a TypeScript error on compile (if using TypeScript)."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"import { attr, makeModel, readOnly, toDate } from 'foscia/core';\n\nexport default class User extends makeModel('users', {\n  verifiedAt: readOnly(attr(toDate())),\n}) {}\n\nconst user = new User();\n// TS error on compile and error on runtime:\nuser.verifiedAt = new Date();\n")),(0,r.kt)("h3",{id:"custom-properties"},"Custom properties"),(0,r.kt)("p",null,"In addition to IDs, attributes and relations, you can implement additional\nproperties to your model. It's useful when you need computed values\n(getters) or specific instance methods."),(0,r.kt)("p",null,"This can be done using the definition or an extending class:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"// Directly in the definition.\nexport default makeModel('users', {\n    firstName: attr(),\n    lastName: attr(),\n    get fullName() {\n        return `${this.firstName} ${this.lastName}`\n    }\n});\n\n// Inside an extending class.\nexport default class User extends makeModel('users', {\n    firstName: attr(),\n    lastName: attr(),\n}) {\n    get fullName() {\n        return `${this.firstName} ${this.lastName}`\n    }\n}\n")),(0,r.kt)("h2",{id:"hooks"},"Hooks"),(0,r.kt)("p",null,"You can hook multiple events from your model instances using the hook\nregistration functions:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"onRetrieved"),": instance was deserialized from a backend response."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"onCreating"),": action to create instance will run soon."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"onCreated"),": action to create instance was ran successfully."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"onUpdating"),": action to update instance will run soon."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"onUpdated"),": action to update instance was ran successfully."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"onSaving"),": action to save (create or update) instance will run soon (always\nran after ",(0,r.kt)("inlineCode",{parentName:"li"},"onCreating")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"onUpdating"),")."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"onSaved"),": action to save (create or update) instance was ran successfully\n(always ran after ",(0,r.kt)("inlineCode",{parentName:"li"},"onCreated")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"onUpdated"),")."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"onDestroying"),": action to destroy instance will run soon."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"onDestroyed"),": action to destroy instance was ran successfully.")),(0,r.kt)("p",null,"To register a hook callback, you must pass a model class and a callback function\nto the registration function. It will return a function that you can call to\nunregister the hook. All model hooks' callbacks have the concerned model\ninstance as the only provided argument."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"import { onSaving } from 'foscia/core';\n\n// After this, the hook will run on each User instance saving.\nconst unregisterThisHook = onSaving(User, async (user) => {\n    // TODO Do something (a)sync with user instance before saving.\n});\n\n// After this, this hook will never run again.\nunregisterThisHook();\n")),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"Hooks' callbacks are async and executed in a sequential fashion (one by one,\nnot parallelized).")),(0,r.kt)("p",null,"You can temporally disable hook execution for a given model by using the\n",(0,r.kt)("inlineCode",{parentName:"p"},"withoutHooks")," function."),(0,r.kt)("p",null,"Be aware that ",(0,r.kt)("inlineCode",{parentName:"p"},"withoutHooks")," will always return a promise, even when\nyour callback is a sync function."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"import { withoutHooks } from 'foscia/core';\n\nconst asyncResultOfYourCallback = await withoutHooks(User, async () => {\n    // TODO Do something async and return it.\n});\n")))}f.isMDXComponent=!0}}]);
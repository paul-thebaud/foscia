"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[3696],{9613:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>f});var o=n(9496);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,o,a=function(e,t){if(null==e)return{};var n,o,a={},r=Object.keys(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=o.createContext({}),s=function(e){var t=o.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=s(e.components);return o.createElement(c.Provider,{value:t},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},m=o.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,c=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),d=s(n),m=a,f=d["".concat(c,".").concat(m)]||d[m]||p[m]||r;return n?o.createElement(f,i(i({ref:t},u),{},{components:n})):o.createElement(f,i({ref:t},u))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,i=new Array(r);i[0]=m;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l[d]="string"==typeof e?e:a,i[1]=l;for(var s=2;s<r;s++)i[s]=n[s];return o.createElement.apply(null,i)}return o.createElement.apply(null,n)}m.displayName="MDXCreateElement"},4919:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>p,frontMatter:()=>r,metadata:()=>l,toc:()=>s});var o=n(1163),a=(n(9496),n(9613));const r={sidebar_position:1,description:"Configuring a model behavior."},i="Models configuration",l={unversionedId:"advanced/models-configuration",id:"advanced/models-configuration",title:"Models configuration",description:"Configuring a model behavior.",source:"@site/docs/advanced/models-configuration.md",sourceDirName:"advanced",slug:"/advanced/models-configuration",permalink:"/func-client/docs/advanced/models-configuration",draft:!1,editUrl:"https://github.com/paul-thebaud/func-client/tree/main/website/docs/advanced/models-configuration.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1,description:"Configuring a model behavior."},sidebar:"docsSidebar",previous:{title:"Advanced",permalink:"/func-client/docs/category/advanced"},next:{title:"Models composition",permalink:"/func-client/docs/advanced/models-composition"}},c={},s=[{value:"How to configure a model",id:"how-to-configure-a-model",level:2},{value:"Common",id:"common",level:2},{value:"Record type",id:"record-type",level:3},{value:"Comparator and cloner",id:"comparator-and-cloner",level:3},{value:"HTTP",id:"http",level:2},{value:"Base URL",id:"base-url",level:3}],u={toc:s},d="wrapper";function p(e){let{components:t,...n}=e;return(0,a.kt)(d,(0,o.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"models-configuration"},"Models configuration"),(0,a.kt)("admonition",{title:"What you'll learn",type:"tip"},(0,a.kt)("ul",{parentName:"admonition"},(0,a.kt)("li",{parentName:"ul"},"Configuring a model through its factory or with a custom factory"),(0,a.kt)("li",{parentName:"ul"},"Learning each available configuration option goal and usage"))),(0,a.kt)("h2",{id:"how-to-configure-a-model"},"How to configure a model"),(0,a.kt)("p",null,"You may configure your model when creating them through your factory ",(0,a.kt)("inlineCode",{parentName:"p"},"makeModel"),"\nor when defining a custom factory such as described in the\n",(0,a.kt)("a",{parentName:"p",href:"/docs/advanced/models-composition"},"model composition guide"),"."),(0,a.kt)("p",null,"Inside a model creation:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript",metastring:'title="post.js"',title:'"post.js"'},"class Post extends makeModel(\n    {\n        type: 'posts',\n        /* ...configuration */\n    },\n    {\n        /* ...definition */\n    },\n) {}\n")),(0,a.kt)("p",null,"Common to multiple models through a custom model factory:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript",metastring:'title="makeModel.js"',title:'"makeModel.js"'},"import { attr, makeModelFactory, toDate } from 'func-client/core';\n\nexport default makeModelFactory(\n    {\n        /* ...definition */\n    },\n    {\n        /* ...configuration */\n    },\n);\n")),(0,a.kt)("h2",{id:"common"},"Common"),(0,a.kt)("h3",{id:"record-type"},"Record type"),(0,a.kt)("p",null,"When using the model factory ",(0,a.kt)("inlineCode",{parentName:"p"},"makeModel"),", you have probably seen that the first\nargument of the function is a string. This is the ",(0,a.kt)("strong",{parentName:"p"},"type")," of the current model."),(0,a.kt)("p",null,"It may be used for different purpose depending on the context:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Concatenate in a URL to target an API specific resource"),(0,a.kt)("li",{parentName:"ul"},"Identify a record from an API/data source serialized data"),(0,a.kt)("li",{parentName:"ul"},"Etc.")),(0,a.kt)("p",null,"To define it, you should follow your data source convention. As an example, in a\nJSON:API the resource types are defined in plural kebab case, such as\n",(0,a.kt)("inlineCode",{parentName:"p"},"blog-posts")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"comments"),"."),(0,a.kt)("p",null,"You may define the type as the only configuration of the model or as a\nconfiguration property (if you want to define other properties):"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript",metastring:'title="post.js"',title:'"post.js"'},"class Post extends makeModel('posts', {\n    /* ...definition */\n}) {}\n// OR\nclass Post extends makeModel(\n    { type: 'posts' },\n    {\n        /* ...definition */\n    },\n) {}\n")),(0,a.kt)("h3",{id:"comparator-and-cloner"},"Comparator and cloner"),(0,a.kt)("p",null,"You may have noticed that FuncClient provide some model history features. Those\nallow you to know which parts of a model instance changed since its retrieval\nfrom the data source or interact with those changes, through\n",(0,a.kt)("a",{parentName:"p",href:"/docs/api/models-utilities"},"some utilities functions"),": ",(0,a.kt)("inlineCode",{parentName:"p"},"changed"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"reset"),", and\n",(0,a.kt)("inlineCode",{parentName:"p"},"syncOriginal"),"."),(0,a.kt)("p",null,"Currently, FuncClient won't clone any value when syncing the instance values (on\nsave, etc.) and will do a strict equal comparison to known if the value changed."),(0,a.kt)("p",null,"The following model configuration is equivalent to the default behavior of\nFuncClient:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript",metastring:'title="post.js"',title:'"post.js"'},"class Post extends makeModel(\n    {\n        comparator: (newValue, prevValue) => nextValue === prevValue,\n        cloner: (value) => value,\n    },\n    {\n        /* definition */\n    },\n) {}\n")),(0,a.kt)("p",null,"You may change those two functions to really clone values when syncing the\ninstance state. Keep in mind that:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Values might be any value your instance could contain, including complex\nobject and even other model instance"),(0,a.kt)("li",{parentName:"ul"},"Cloned values might be restored through ",(0,a.kt)("inlineCode",{parentName:"li"},"reset")," utility"),(0,a.kt)("li",{parentName:"ul"},"Making a real clone of a value without updating the comparator will break\nthe history because of its default behavior")),(0,a.kt)("h2",{id:"http"},"HTTP"),(0,a.kt)("p",null,"The following configuration options are specific to HTTP models (JSON:API, JSON\nREST, etc.)"),(0,a.kt)("h3",{id:"base-url"},"Base URL"),(0,a.kt)("p",null,"You may define a ",(0,a.kt)("inlineCode",{parentName:"p"},"baseURL")," configuration option on your models. It will replace\nthe default base URL define on the adapter."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript",metastring:'title="post.js"',title:'"post.js"'},"class Post extends makeModel(\n    {\n        type: 'posts',\n        baseURL: 'https://example.com/api/v2',\n    },\n    {\n        /* ...definition */\n    },\n) {}\n")))}p.isMDXComponent=!0}}]);
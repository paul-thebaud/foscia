"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[7159],{9613:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>g});var a=t(9496);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function s(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?s(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,a,o=function(e,n){if(null==e)return{};var t,a,o={},s=Object.keys(e);for(a=0;a<s.length;a++)t=s[a],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)t=s[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var c=a.createContext({}),l=function(e){var n=a.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},p=function(e){var n=l(e.components);return a.createElement(c.Provider,{value:n},e.children)},m="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},u=a.forwardRef((function(e,n){var t=e.components,o=e.mdxType,s=e.originalType,c=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),m=l(t),u=o,g=m["".concat(c,".").concat(u)]||m[u]||d[u]||s;return t?a.createElement(g,r(r({ref:n},p),{},{components:t})):a.createElement(g,r({ref:n},p))}));function g(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var s=t.length,r=new Array(s);r[0]=u;var i={};for(var c in n)hasOwnProperty.call(n,c)&&(i[c]=n[c]);i.originalType=e,i[m]="string"==typeof e?e:o,r[1]=i;for(var l=2;l<s;l++)r[l]=t[l];return a.createElement.apply(null,r)}return a.createElement.apply(null,t)}u.displayName="MDXCreateElement"},5936:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>r,default:()=>d,frontMatter:()=>s,metadata:()=>i,toc:()=>l});var a=t(8028),o=(t(9496),t(9613));const s={sidebar_position:33,description:"Tracking models states change (values, etc.)."},r="Tracking models changes",i={unversionedId:"guides/models/models-changes-tracking",id:"guides/models/models-changes-tracking",title:"Tracking models changes",description:"Tracking models states change (values, etc.).",source:"@site/docs/guides/models/models-changes-tracking.md",sourceDirName:"guides/models",slug:"/guides/models/models-changes-tracking",permalink:"/foscia/docs/guides/models/models-changes-tracking",draft:!1,editUrl:"https://github.com/paul-thebaud/foscia/tree/main/website/docs/guides/models/models-changes-tracking.md",tags:[],version:"current",sidebarPosition:33,frontMatter:{sidebar_position:33,description:"Tracking models states change (values, etc.)."},sidebar:"docsSidebar",previous:{title:"Creating a transformer",permalink:"/foscia/docs/guides/models/custom-transformers"},next:{title:"Loading models relations",permalink:"/foscia/docs/guides/models/models-relations-loading"}},c={},l=[{value:"Taking a snapshot",id:"taking-a-snapshot",level:2},{value:"Checking for changes",id:"checking-for-changes",level:2},{value:"Syncing changes",id:"syncing-changes",level:2},{value:"Restoring changes",id:"restoring-changes",level:2}],p={toc:l},m="wrapper";function d(e){let{components:n,...t}=e;return(0,o.kt)(m,(0,a.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"tracking-models-changes"},"Tracking models changes"),(0,o.kt)("admonition",{title:"What you'll learn",type:"tip"},(0,o.kt)("ul",{parentName:"admonition"},(0,o.kt)("li",{parentName:"ul"},"Tracking a model's instance changes"),(0,o.kt)("li",{parentName:"ul"},"Creating snapshots of a model's instance"),(0,o.kt)("li",{parentName:"ul"},"Restoring snapshots of a model's instance"))),(0,o.kt)("p",null,"Foscia will track changes over your instances properties (IDs, attributes or\nrelations) throughout their existence."),(0,o.kt)("p",null,'Each time you send/fetch an instance to/from your data source, your instance\'s\nproperties will be synced in an "original" snapshot.'),(0,o.kt)("p",null,"This original snapshot allows you to check if some properties have changed since\nlast synchronization."),(0,o.kt)("h2",{id:"taking-a-snapshot"},"Taking a snapshot"),(0,o.kt)("p",null,"You can take a snapshot of an instance at any time using ",(0,o.kt)("inlineCode",{parentName:"p"},"takeSnapshot"),". This is\ndone automatically every time you send/fetch an instance to/form your data\nsource, and the created snapshot is saved into the ",(0,o.kt)("inlineCode",{parentName:"p"},"$original")," properties of\nyour instance."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"import { takeSnapshot } from 'foscia/core';\n\nconst myPostSnapshot = takeSnapshot(myPost);\n")),(0,o.kt)("h2",{id:"checking-for-changes"},"Checking for changes"),(0,o.kt)("p",null,"To check for changes between two snapshots, you can use ",(0,o.kt)("inlineCode",{parentName:"p"},"compareSnapshots"),". To\ncheck for changes between an instance and its original snapshot, you can use\n",(0,o.kt)("inlineCode",{parentName:"p"},"changed")," (this will automatically take a new snapshot and compare against it)."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"import { changed, compareSnapshots, takeSnapshot } from 'foscia/core';\n\n// True if any properties changed or instance does exists now.\nchanged(myPost);\n// False in the same case as above.\ncompareSnapshots(takeSnapshot(myPost), myPost.$original);\n\n// True only if title has changed.\nchanged(myPost, ['title']);\n// False in the same case as above.\ncompareSnapshots(takeSnapshot(myPost), myPost.$original, ['title']);\n")),(0,o.kt)("h2",{id:"syncing-changes"},"Syncing changes"),(0,o.kt)("p",null,"You can mark your instance as synced any time using ",(0,o.kt)("inlineCode",{parentName:"p"},"markSynced"),". Just like\nother helper functions, you can affect only specific properties."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"import { markSynced } from 'foscia/core';\n\n// Mark all properties synced in $original snapshot.\nmarkSynced(myPost);\n// Mark the title synced on $original snapshot.\nmarkSynced(myPost, ['title']);\n")),(0,o.kt)("h2",{id:"restoring-changes"},"Restoring changes"),(0,o.kt)("p",null,"You can restore a snapshot on your model as synced any time using ",(0,o.kt)("inlineCode",{parentName:"p"},"restore")," and\n",(0,o.kt)("inlineCode",{parentName:"p"},"restoreSnapshot"),". Just like other helper functions, you can affect only\nspecific properties."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"import { restore, restoreSnapshot } from 'foscia/core';\n\n// Restore whole state.\nrestore(myPost);\n// Equivalent with `restoreSnapshot`\nrestoreSnapshot(myPost, myPost.$original);\n// Restore title property only.\nrestore(myPost, ['title']);\n// Equivalent with `restoreSnapshot`\nrestoreSnapshot(myPost, myPost.$original, ['title']);\n")))}d.isMDXComponent=!0}}]);
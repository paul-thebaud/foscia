"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[684],{9613:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>f});var a=n(9496);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var i=a.createContext({}),u=function(e){var t=a.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},c=function(e){var t=u(e.components);return a.createElement(i.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,i=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),p=u(n),m=o,f=p["".concat(i,".").concat(m)]||p[m]||d[m]||r;return n?a.createElement(f,s(s({ref:t},c),{},{components:n})):a.createElement(f,s({ref:t},c))}));function f(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,s=new Array(r);s[0]=m;var l={};for(var i in t)hasOwnProperty.call(t,i)&&(l[i]=t[i]);l.originalType=e,l[p]="string"==typeof e?e:o,s[1]=l;for(var u=2;u<r;u++)s[u]=n[u];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},5153:(e,t,n)=>{n.d(t,{Z:()=>s});var a=n(9496),o=n(5924);const r={tabItem:"tabItem_oaqp"};function s(e){let{children:t,hidden:n,className:s}=e;return a.createElement("div",{role:"tabpanel",className:(0,o.Z)(r.tabItem,s),hidden:n},t)}},9407:(e,t,n)=>{n.d(t,{Z:()=>w});var a=n(1163),o=n(9496),r=n(5924),s=n(3642),l=n(3442),i=n(5506),u=n(2487),c=n(9473);function p(e){return function(e){return o.Children.map(e,(e=>{if((0,o.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))}(e).map((e=>{let{props:{value:t,label:n,attributes:a,default:o}}=e;return{value:t,label:n,attributes:a,default:o}}))}function d(e){const{values:t,children:n}=e;return(0,o.useMemo)((()=>{const e=t??p(n);return function(e){const t=(0,u.l)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,n])}function m(e){let{value:t,tabValues:n}=e;return n.some((e=>e.value===t))}function f(e){let{queryString:t=!1,groupId:n}=e;const a=(0,l.k6)(),r=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:t,groupId:n});return[(0,i._X)(r),(0,o.useCallback)((e=>{if(!r)return;const t=new URLSearchParams(a.location.search);t.set(r,e),a.replace({...a.location,search:t.toString()})}),[r,a])]}function b(e){const{defaultValue:t,queryString:n=!1,groupId:a}=e,r=d(e),[s,l]=(0,o.useState)((()=>function(e){let{defaultValue:t,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!m({value:t,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const a=n.find((e=>e.default))??n[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:t,tabValues:r}))),[i,u]=f({queryString:n,groupId:a}),[p,b]=function(e){let{groupId:t}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(t),[a,r]=(0,c.Nk)(n);return[a,(0,o.useCallback)((e=>{n&&r.set(e)}),[n,r])]}({groupId:a}),g=(()=>{const e=i??p;return m({value:e,tabValues:r})?e:null})();(0,o.useLayoutEffect)((()=>{g&&l(g)}),[g]);return{selectedValue:s,selectValue:(0,o.useCallback)((e=>{if(!m({value:e,tabValues:r}))throw new Error(`Can't select invalid tab value=${e}`);l(e),u(e),b(e)}),[u,b,r]),tabValues:r}}var g=n(1517);const h={tabList:"tabList_PUic",tabItem:"tabItem_TlgZ"};function y(e){let{className:t,block:n,selectedValue:l,selectValue:i,tabValues:u}=e;const c=[],{blockElementScrollPositionUntilNextRender:p}=(0,s.o5)(),d=e=>{const t=e.currentTarget,n=c.indexOf(t),a=u[n].value;a!==l&&(p(t),i(a))},m=e=>{let t=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{const n=c.indexOf(e.currentTarget)+1;t=c[n]??c[0];break}case"ArrowLeft":{const n=c.indexOf(e.currentTarget)-1;t=c[n]??c[c.length-1];break}}t?.focus()};return o.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.Z)("tabs",{"tabs--block":n},t)},u.map((e=>{let{value:t,label:n,attributes:s}=e;return o.createElement("li",(0,a.Z)({role:"tab",tabIndex:l===t?0:-1,"aria-selected":l===t,key:t,ref:e=>c.push(e),onKeyDown:m,onClick:d},s,{className:(0,r.Z)("tabs__item",h.tabItem,s?.className,{"tabs__item--active":l===t})}),n??t)})))}function v(e){let{lazy:t,children:n,selectedValue:a}=e;if(n=Array.isArray(n)?n:[n],t){const e=n.find((e=>e.props.value===a));return e?(0,o.cloneElement)(e,{className:"margin-top--md"}):null}return o.createElement("div",{className:"margin-top--md"},n.map(((e,t)=>(0,o.cloneElement)(e,{key:t,hidden:e.props.value!==a}))))}function k(e){const t=b(e);return o.createElement("div",{className:(0,r.Z)("tabs-container",h.tabList)},o.createElement(y,(0,a.Z)({},e,t)),o.createElement(v,(0,a.Z)({},e,t)))}function w(e){const t=(0,g.Z)();return o.createElement(k,(0,a.Z)({key:String(t)},e))}},5763:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>f,frontMatter:()=>l,metadata:()=>u,toc:()=>p});var a=n(1163),o=(n(9496),n(9613)),r=n(5153),s=n(9407);const l={sidebar_position:20,description:"Blog articles with tags example. Model setup and action usage."},i="JSON:API blog CRUD",u={unversionedId:"examples/jsonapi-blog",id:"examples/jsonapi-blog",title:"JSON:API blog CRUD",description:"Blog articles with tags example. Model setup and action usage.",source:"@site/docs/examples/jsonapi-blog.mdx",sourceDirName:"examples",slug:"/examples/jsonapi-blog",permalink:"/foscia/docs/examples/jsonapi-blog",draft:!1,editUrl:"https://github.com/paul-thebaud/foscia/tree/main/website/docs/examples/jsonapi-blog.mdx",tags:[],version:"current",lastUpdatedAt:1679607402,formattedLastUpdatedAt:"Mar 23, 2023",sidebarPosition:20,frontMatter:{sidebar_position:20,description:"Blog articles with tags example. Model setup and action usage."},sidebar:"docsSidebar",previous:{title:"Examples",permalink:"/foscia/docs/category/examples"},next:{title:"JSON:API generic CRUD",permalink:"/foscia/docs/examples/jsonapi-generic"}},c={},p=[{value:"Models",id:"models",level:2},{value:"Classic CRUD",id:"classic-crud",level:2},{value:"View many",id:"view-many",level:3},{value:"View one",id:"view-one",level:3},{value:"Create or update one",id:"create-or-update-one",level:3},{value:"Delete one",id:"delete-one",level:3},{value:"Non-standard actions",id:"non-standard-actions",level:2}],d={toc:p},m="wrapper";function f(e){let{components:t,...n}=e;return(0,o.kt)(m,(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"jsonapi-blog-crud"},"JSON:API blog CRUD"),(0,o.kt)("admonition",{title:"What you'll learn",type:"tip"},(0,o.kt)("ul",{parentName:"admonition"},(0,o.kt)("li",{parentName:"ul"},"Defining blog and tag models"),(0,o.kt)("li",{parentName:"ul"},"Use blog model for CRUD operations on a JSON:API backend"))),(0,o.kt)("p",null,"This is a simple example to implement a blog content management using\nFoscia. This example is framework-agnostic, so you'll only see examples of\nmodels or actions calls. You may use those examples inside any project (Vanilla\nJS, React, Vue, etc.)."),(0,o.kt)("h2",{id:"models"},"Models"),(0,o.kt)(s.Z,{groupId:"language",defaultValue:"ts",values:[{label:"TypeScript",value:"ts"},{label:"JavaScript",value:"js"}],mdxType:"Tabs"},(0,o.kt)(r.Z,{value:"ts",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="models/tag.ts"',title:'"models/tag.ts"'},"import { attr, hasMany, makeModel } from 'foscia/core';\nimport type Post from './post';\n\nexport default class Tag extends makeModel('tags', {\n    name: attr<string>(),\n    posts: hasMany<Post>(),\n}) {}\n"))),(0,o.kt)(r.Z,{value:"js",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="models/tag.ts"',title:'"models/tag.ts"'},"import { attr, hasMany, makeModel } from 'foscia/core';\n\nexport default class Tag extends makeModel('tags', {\n    name: attr(),\n    posts: hasMany(),\n}) {}\n")))),(0,o.kt)(s.Z,{groupId:"language",defaultValue:"ts",values:[{label:"TypeScript",value:"ts"},{label:"JavaScript",value:"js"}],mdxType:"Tabs"},(0,o.kt)(r.Z,{value:"ts",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="models/post.ts"',title:'"models/post.ts"'},"import { attr, hasMany, makeModel, toDate } from 'foscia/core';\nimport type Tag from './tag';\n\nexport default class Post extends makeModel('posts', {\n    title: attr<string>(),\n    description: attr<string>(),\n    publishedAt: attr(toDate()),\n    tags: hasMany<Tag>(),\n    get published() {\n        return !!this.publishedAt;\n    },\n}) {}\n"))),(0,o.kt)(r.Z,{value:"js",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="models/post.ts"',title:'"models/post.ts"'},"import { attr, hasMany, makeModel, toDate } from 'foscia/core';\n\nexport default class Post extends makeModel('posts', {\n    title: attr(),\n    description: attr(),\n    publishedAt: attr(toDate()),\n    tags: hasMany(),\n    get published() {\n        return !!this.publishedAt;\n    },\n}) {}\n")))),(0,o.kt)("h2",{id:"classic-crud"},"Classic CRUD"),(0,o.kt)("h3",{id:"view-many"},"View many"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"import { forModel, when, all } from 'foscia/core';\nimport {\n    filterBy,\n    sortByDesc,\n    paginate,\n    usingDocument,\n} from 'foscia/jsonapi';\nimport action from './action';\nimport Post from './models/post';\n\nexport default async function fetchAllPost(query = {}) {\n    return action()\n        .use(forModel(Post))\n        .use(when(query.search, (a, s) => a.use(filterBy('search', s))))\n        .use(sortByDesc('createdAt'))\n        .use(paginate({ number: query.page ?? 1 }))\n        .run(all(usingDocument));\n}\n\nconst { instances, document } = await fetchAllPost({ search: 'Hello' });\n")),(0,o.kt)("h3",{id:"view-one"},"View one"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"import { find, include, oneOrFail } from 'foscia/core';\nimport action from './action';\nimport Post from './models/post';\n\nexport default async function fetchOnePost(id) {\n    return action().use(find(Post, id)).use(include('tags')).run(oneOrFail());\n}\n\nconst post = await fetchOnePost('123-abc');\n")),(0,o.kt)("h3",{id:"create-or-update-one"},"Create or update one"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"import { changed, fill, oneOrCurrent, reset, save, when } from 'foscia/core';\nimport action from './action';\nimport Post from './models/post';\n\nexport default async function savePost(post, values = {}) {\n    fill(post, values);\n\n    try {\n        await action()\n            .use(save(post))\n            .run(\n                when(\n                    !post.exists || changed(post),\n                    oneOrCurrent(),\n                    () => instance,\n                ),\n            );\n    } catch (error) {\n        reset(post);\n\n        throw error;\n    }\n\n    return post;\n}\n\nconst post = new Post();\n\nawait savePost(post, {\n    title: 'Hello World!',\n    publishedAt: new Date(),\n});\n")),(0,o.kt)("h3",{id:"delete-one"},"Delete one"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"import { destroy, none } from 'foscia/core';\nimport action from './action';\nimport Post from './models/post';\n\nexport default async function deletePost(post) {\n    await action().use(destroy(post)).run(none());\n}\n\nconst post = new Post();\n\nawait deletePost(post);\n")),(0,o.kt)("h2",{id:"non-standard-actions"},"Non-standard actions"),(0,o.kt)("p",null,"You can also use Foscia to run non-standard actions to your backend."),(0,o.kt)("p",null,"Thanks to functional programming, you can easily combine non-standard action\nwith classical context enhancers and runners."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"import { forModel, forInstance, include, when, oneOrFail } from 'foscia/core';\nimport { makeGet, makePost } from 'foscia/http';\nimport action from './action';\nimport Post from './models/post';\n\nexport default function bestPosts() {\n  return action()\n    .use(forModel(Post))\n    .use(makeGet('actions/best-posts'))\n    .run(all());\n}\n\nexport default function publishPost(post, query = {}) {\n  return action()\n    .use(forInstance(post))\n    .use(when(query.include, (a, i) => a.use(include(i))))\n    .use(makePost('actions/publish', {\n      publishedAt: new Date(),\n    }))\n    .run(oneOrFail());\n}\n\n// Sends a GET to \"<your-base-url>/posts/actions/best-posts\n// and deserialize a list of Post instances.\nconst posts = await bestPosts();\n\nconst post = new Post();\n// Sends a POST to \"<your-base-url>/posts/<id>/actions/publish\n// and deserialize a Post instance.\nawait publishPost(post);\n")),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("p",{parentName:"admonition"},(0,o.kt)("inlineCode",{parentName:"p"},"makeGet")," or other custom request enhancers (",(0,o.kt)("inlineCode",{parentName:"p"},"makePost"),', etc.) will just append\nthe given path if it is not an "absolute" (starting with a scheme such as\n',(0,o.kt)("inlineCode",{parentName:"p"},"https://"),") path. This allows you to run non-standard actions scoped to an\ninstance, etc."),(0,o.kt)("p",{parentName:"admonition"},"Your may also use an absolute (starting with a scheme) path like\n",(0,o.kt)("inlineCode",{parentName:"p"},"https://example.com/some/magic/action")," to ignore the configured base URL\nand run a non-standard action.")))}f.isMDXComponent=!0}}]);
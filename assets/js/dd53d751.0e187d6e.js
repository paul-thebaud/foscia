"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[1752],{9613:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var o=n(9496);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,o,a=function(e,t){if(null==e)return{};var n,o,a={},s=Object.keys(e);for(o=0;o<s.length;o++)n=s[o],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(o=0;o<s.length;o++)n=s[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=o.createContext({}),c=function(e){var t=o.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},p=function(e){var t=c(e.components);return o.createElement(l.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},h=o.forwardRef((function(e,t){var n=e.components,a=e.mdxType,s=e.originalType,l=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),u=c(n),h=a,m=u["".concat(l,".").concat(h)]||u[h]||d[h]||s;return n?o.createElement(m,r(r({ref:t},p),{},{components:n})):o.createElement(m,r({ref:t},p))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var s=n.length,r=new Array(s);r[0]=h;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i[u]="string"==typeof e?e:a,r[1]=i;for(var c=2;c<s;c++)r[c]=n[c];return o.createElement.apply(null,r)}return o.createElement.apply(null,n)}h.displayName="MDXCreateElement"},6327:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>r,default:()=>d,frontMatter:()=>s,metadata:()=>i,toc:()=>c});var o=n(1163),a=(n(9496),n(9613));const s={sidebar_position:100},r="FAQ",i={unversionedId:"help/faq",id:"help/faq",title:"FAQ",description:"If you have any questions, feel free to ask them on our",source:"@site/docs/help/faq.md",sourceDirName:"help",slug:"/help/faq",permalink:"/foscia/docs/help/faq",draft:!1,editUrl:"https://github.com/paul-thebaud/foscia/tree/main/website/docs/help/faq.md",tags:[],version:"current",lastUpdatedAt:1680109581,formattedLastUpdatedAt:"Mar 29, 2023",sidebarPosition:100,frontMatter:{sidebar_position:100},sidebar:"docsSidebar",previous:{title:"Help",permalink:"/foscia/docs/category/help"}},l={},c=[{value:"Why are we not using big <code>Model</code> and <code>Builder</code> classes?",id:"why-are-we-not-using-big-model-and-builder-classes",level:2},{value:"Is it type safe?",id:"is-it-type-safe",level:2},{value:"Why extending models&#39; classes?",id:"why-extending-models-classes",level:2},{value:"What are the downsides of Foscia approach?",id:"what-are-the-downsides-of-foscia-approach",level:2},{value:"Why is my IDE slow when using Foscia?",id:"why-is-my-ide-slow-when-using-foscia",level:2}],p={toc:c},u="wrapper";function d(e){let{components:t,...n}=e;return(0,a.kt)(u,(0,o.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"faq"},"FAQ"),(0,a.kt)("p",null,"If you have any questions, feel free to ask them on our\n",(0,a.kt)("a",{parentName:"p",href:"https://github.com/paul-thebaud/foscia/issues"},"GitHub Issues page"),"."),(0,a.kt)("h2",{id:"why-are-we-not-using-big-model-and-builder-classes"},"Why are we not using big ",(0,a.kt)("inlineCode",{parentName:"h2"},"Model")," and ",(0,a.kt)("inlineCode",{parentName:"h2"},"Builder")," classes?"),(0,a.kt)("p",null,"In a lot of frameworks, modeling the data and building the query are done\nthrough two main classes: the ",(0,a.kt)("inlineCode",{parentName:"p"},"Model")," and the ",(0,a.kt)("inlineCode",{parentName:"p"},"Builder"),"."),(0,a.kt)("p",null,"The goal of Foscia is to provide a lot of simple function to affect model\ninstances or their context. If all of those functions were included in classes,\nit will be in your final production bundle even if you are not using them.\nThanks to the way Foscia works, ",(0,a.kt)("strong",{parentName:"p"},"all unused models helpers or actions\nenhancers/runners can be tree-shaken.")),(0,a.kt)("h2",{id:"is-it-type-safe"},"Is it type safe?"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Yes!")," Foscia makes great use of Typescript generics to provide strongly typed\nmodels objects and contexts changes."),(0,a.kt)("p",null,"Here are a short example of the capabilities reusing the previous examples:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="post.ts"',title:'"post.ts"'},"import { makeModel, attr, hasMany, toDate } from 'foscia/core';\n\nclass Post extends makeModel('posts', {\n    title: attr({ default: '' }), // Infered to string.\n    description: attr<string>(), // Custom types are also supported.\n    createdAt: attr(toDate()), // Infered from transformers.\n    publishedAt: attr<Date | null>(toDate()),\n    comments: hasMany<Comment>(),\n    // `this` context is available and strongly typed in definition methods.\n    get isPublished() {\n        return !!this.publishedAt;\n    },\n}) {\n    // `this` context is also available and strongly typed in class methods.\n    shortenDescription() {\n        return this.description.substring(0, 50);\n    }\n}\n")),(0,a.kt)("p",null,"Type safe models are used by context enhancers to provide strongly typed\nparameters."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"const posts = await action()\n    // We are telling the action context is now for the Post model.\n    .use(forModel(Post))\n    // We can now use this action context to strongly type context enhancer params.\n    // As an example, `include` is typed for deep dotted relations, such as:\n    // \"comments\", \"comments.author\", \"comments.author.favoritePosts\", etc.\n    .use(include('comments'))\n    // As another example, `fields` is typed for direct attributes or relations of the model.\n    .use(fields('title', 'description', 'comments'))\n    .run(all());\n")),(0,a.kt)("h2",{id:"why-extending-models-classes"},"Why extending models' classes?"),(0,a.kt)("p",null,"Mainly because ",(0,a.kt)("strong",{parentName:"p"},"it prevents dependency cycles")," when using TypeScript."),(0,a.kt)("p",null,"This is clearly explained in the\n",(0,a.kt)("a",{parentName:"p",href:"/docs/core-concepts/models#note-on-exported-value"},"Models guide"),"."),(0,a.kt)("h2",{id:"what-are-the-downsides-of-foscia-approach"},"What are the downsides of Foscia approach?"),(0,a.kt)("p",null,"When declaring models, there are no clear downside of the functional\nprogramming, as ",(0,a.kt)("inlineCode",{parentName:"p"},"this")," context is still available in definition and classes\nbody."),(0,a.kt)("p",null,"But, since we are not building the action factory for you, you must initialize\nthis factory yourself with the things you need: an adapter, a serializer, etc.\nDon't worry, the process is still pretty simple thanks to blueprints."),(0,a.kt)("p",null,"In addition, you will need a supplementary step to be able to use\n",(0,a.kt)("inlineCode",{parentName:"p"},"action().forModel(Post).all()"),", because those functions must be imported to be\nused. This is possible through actions' extensions, which will plug functions to\nyour action instance and allow you to use a builder pattern call style."),(0,a.kt)("h2",{id:"why-is-my-ide-slow-when-using-foscia"},"Why is my IDE slow when using Foscia?"),(0,a.kt)("p",null,"Due to generics usage and types inference, Foscia may require more types\ncomputation for autocompletion than other librairies."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"JetBrains's IDEs")," seems to currently have a problem with TypeScript types\nevaluation performance:\n",(0,a.kt)("a",{parentName:"li",href:"https://youtrack.jetbrains.com/issue/WEB-52943/Meta-High-CPU-usage-on-resolve-or-types-evaluation-in-TypeScript"},"you should check out this meta issue tracking CPU overwhelm when using TypeScript to get updates"),"."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"VSCode")," looks to quickly provide autocompletion without any problem.")))}d.isMDXComponent=!0}}]);